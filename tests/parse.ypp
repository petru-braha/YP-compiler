%{
#include <stdio.h>
#include <cstring>
#include <string>
#include <vector>
#include "util.hpp"

extern int yylex();
void yyerror(const char * s);

extern FILE* yyin;
extern char* yytext;
extern int yylineno;
extern bool method_master_started;
size_t count_error;

// function_data* f_data_global;

std::string cls_last_name;
std::string fct_last_name;

// std::vector<symbol_table> symbols;
// #define LAST_SCOPE symbols.size() - 1
%}

/* comments:
 * class == type
 * the number of started scopes == symbols.size();
 
 * states:
 ** declaration
 ** definition
 ** call
 * order of state presentation: 
 ** class
 ** variable
 ** function
 ** object
 
 */

//------------------------------------------------
//------------------------------------------------

%union {
    char* token_name;
    /*
    int basic_int;
    float basic_float;
    char basic_chr;
    std::string basic_str;
    bool basic_bol; */
}
%type method_master
%type<token_name> cst_call
%token<token_name> method_type method_print
%token R_CLS A_PRV A_PUB A_FLD
%token OPERATOR_ASSIGN OPERATOR_RELTIN

%token<token_name> S_NME R_TYP
%token<token_name> C_INT C_FLT C_CHR C_STR C_BOL

%token R_SEQ_IF R_SEQ_FOR R_SEQ_WHL

%start starting_symbol

%%

/* reduce-reduce conflict
starting_symbol : S_NME
                | S_NME
*/

starting_symbol : S_NME R_TYP
                | S_NME S_NME S_NME
// starting_symbol : { const char* lmao; type_exists(lmao); }
%%

//------------------------------------------------
//------------------------------------------------
// C++ functions:

void yyerror(const char * s){
    count_error++;
    printf("error - line %d: %s.\n", yylineno, s);
}

int main(int argc, char** argv)
{
    if(argc != 2)
    {
        yyerror("wrong number of arguments");
        return EXIT_FAILURE;
    }

    FILE* ptr = fopen(argv[1],"r");
    if(nullptr == ptr)
    {
        yyerror("invalid file");
        return EXIT_FAILURE;
    }

    yyin = ptr;
    yyparse();
    return EXIT_SUCCESS;
}
