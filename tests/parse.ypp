%{
#include <stdio.h>
#include <cstring>
#include <string>
#include <vector>
#include "util.hpp"

extern int yylex();
void yyerror(const char * s);

extern FILE* yyin;
extern char* yytext;
extern int yylineno;
extern bool method_master_started;
size_t count_error;
std::vector<symbol_table> symbols;
#define LAST_SCOPE symbols.size() - 1
%}
/*
%left '&' '|'
%left "==" "!=" "<=" "<" ">=" ">"
%left '+' '-'
%left '*' '/' '%'
%left '(' ')'

%right '='
%right '^'
*/

%union {
    char* information;
    unsigned char character;
    long long intg_number;
    double real_number;
}

%token<information> MASTER TYPEOF PRINTF
%token RSV_CLSS ACS_PRIV ACS_PUBL ACS_FILD

%token<information> SMT_NAME RSV_TYPE
%token<intg_number> LIT_INTG LIT_CHAR LIT_BOOL
%token<real_number> LIT_FLOT
%token<real_number> LIT_STRG

%token<character> OPR_ASSIGN OPR0 OPR1 OPR2 OPR3 OPR4
%token<information> OPR_RELTN

%type<intg_number> expression
%type<intg_number> term
%type<intg_number> factor

%start starting_symbol

%%

starting_symbol : expression { printf("result: %d\n", $1); };
expression: term OPR0 expression {
              if('+' == $2)
                $$ = $1 + $3;
              else
                $$ = $1 - $3;
            }
          | term { $$ = $1; }
          ;
term: term OPR1 factor { 
        if('*' == $2)
          $$ = $1 * $3;
        else
          $$ = $1 / $3; 
      }
    | factor { $$ = $1; }
    ;
factor: '(' expression ')' { $$ = $2; }
      | LIT_INTG { $$ = $1; }
      ;


%%

/*!------------------------------------------------
/*!------------------------------------------------
/*! C++ functions */

void yyerror(const char * s){
  count_error++;
  printf("error - line %d: %s.\n", yylineno, s);
}

int main(int argc, char** argv)
{
  if(argc != 2)
  {
    yyerror("wrong number of arguments");
    return EXIT_FAILURE;
  }

  FILE* ptr = fopen(argv[1], "r");
  if(nullptr == ptr)
  {
    yyerror("invalid file");
    return EXIT_FAILURE;
  }

  yyin = ptr;
  yyparse();
  return EXIT_SUCCESS;
}
