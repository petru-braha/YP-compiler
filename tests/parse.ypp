%{
#include <stdio.h>
#include <cstring>
#include <string>
#include <vector>
#include "util.hpp"

extern int yylex();
void yyerror(const char * s);

extern FILE* yyin;
extern char* yytext;
extern int yylineno;
extern bool method_master_started;
size_t count_error;
std::vector<symbol_table> symbols;
#define LAST_SCOPE symbols.size() - 1
%}

// not magic sadly
%left '+' '-'
%left '*' '/' '%'

%union {
    char* token_name;
}

%token<token_name> S_NME R_TYP
%token<token_name> C_INT C_FLT C_CHR C_STR C_BOL
%token<token_name> OP0 OP1 OP2 OP3

%type<token_name> expression
%start starting_symbol

%%

starting_symbol : expression {
                    printf("result: %s\n", $1); free($1); 
                  }
                ;
expression  : expression OP1 expression {
                $$ = function($1, $2, $3);
                free($1);
                free($2);
                free($3);
              }
            | expression OP0 expression { 
                $$ = function($1, $2, $3); 
                free($1);
                free($2);
                free($3);
              }
            | C_INT
            ;

%%

/*!------------------------------------------------
/*!------------------------------------------------
/*! C++ functions */

void yyerror(const char * s){
  count_error++;
  printf("error - line %d: %s.\n", yylineno, s);
}

int main(int argc, char** argv)
{
  if(argc != 2)
  {
    yyerror("wrong number of arguments");
    return EXIT_FAILURE;
  }

  FILE* ptr = fopen(argv[1], "r");
  if(nullptr == ptr)
  {
    yyerror("invalid file");
    return EXIT_FAILURE;
  }

  yyin = ptr;
  yyparse();
  return EXIT_SUCCESS;
}
