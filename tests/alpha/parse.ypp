%{
  #include <stdio.h>
  #include <string>
  
  #include "src/class/primitive_data.hpp"
  #include "src/class/function_data.hpp"
  #include "src/class/object_data.hpp"
  #include "src/class/array_data.hpp"
  #include "src/class/class_data.hpp"

  #include "src/class/symbol_table.hpp"
  #include "src/class/type_table.hpp"
  
  #include "src/ast_expression.hpp"
  #include "src/ast_definition.hpp"
  #include "src/ast_action.hpp"
  #include "src/ast_scope.hpp"
  #include "src/ast_control.hpp"

  int yylex();
  void yyerror(const char * s);

  extern FILE* yyin;
  extern char* yytext;
  extern int yylineno;
  size_t count_error;

  std::vector<symbol_table> symbols;
  #define LAST_SCOPE symbols.size() - 1
%}

%left '&' '|'
%left "==" "!=" "<=" "<" ">=" ">"
%left '+' '-'
%left '*' '/' '%'
%left '(' ')'

%right '='
%right '^'

%code requires
{
  #include <vector>
  class ast_statement;
  class ast_expression;
}
%union {
  char* information;
  char character;
  ast_statement* s_node;
  ast_expression* e_node;
  std::vector<ast_statement*>* subtree;
}

%token SCOPE_BEGIN SCOPE_END
%token ACT_BREK ACT_CONT ACT_RTRN

%token<character> OPR0 OPR1 OPR2 OPR3 OPRU
%token<information> LITERAL
%token SEQ_IFIF SEQ_ELSE SEQ_WHLE SEQ_FOOR
%token<information> SMT_NAME RSV_TYPE

%type<s_node> scope
%type<subtree> statement_list
%type<s_node> stat ctrl decl
%type<e_node> expr term fact unit asgn

%start starting_symbol

%%
starting_symbol : scope {
                    symbols.emplace_back();
                    $1->evaluate();
                    delete $1;
                  }
                | mata
                ;

mata: mata lala { printf("y"); }
    | lala { printf("t"); }
    ;
lala: 'j'
    ;

scope : SCOPE_BEGIN { symbols.emplace_back(); } 
          statement_list
          SCOPE_END { 
            $$ = new ast_scope($3); 
            symbols.pop_back();
          }
      | SCOPE_BEGIN { symbols.emplace_back(); }
          SCOPE_END {
            $$ = new ast_scope(nullptr);
            symbols.pop_back();
          }
    ;

statement_list: stat { 
                  $$ = new std::vector<ast_statement*>;
                  $$->emplace_back($1);
                }
              | statement_list stat {
                  $1->emplace_back($2);
                  $$ = $1;
                }
              ;

stat: asgn ';' {
        $$ = $1;
        char* evaluation = $1->evaluate();
        printf("result: %s\n", evaluation);
        free(evaluation);
      }
    | ACT_BREK ';' { $$ = nullptr; }
    | ACT_CONT ';' { $$ = nullptr; }
    | ACT_RTRN expr ';' { $$ = nullptr; }
    | ctrl { $$ = $1; }
    | decl { $$ = $1; }
    | scope { $$ = $1; }
    ;

ctrl: SEQ_IFIF '(' expr ')' scope { $$ = new ast_ifelse($3, $5, nullptr); }
    | SEQ_IFIF '(' expr ')' scope SEQ_ELSE scope { $$ = new ast_ifelse($3, $5, $7); }
    | SEQ_WHLE '(' expr ')' scope { $$ = new ast_while($3, $5); }
    | SEQ_FOOR '(' expr ';' expr ';' expr ')' scope { $$ = new ast_for($3, $5, $7, $9); }
    ;


decl: RSV_TYPE SMT_NAME ';' { $$ = new ast_def($1, $2, nullptr); }
    | RSV_TYPE SMT_NAME OPR3 expr ';' { $$ = new ast_def($1, $2, $4->evaluate()); }
    ;

/*local_declaration : var_decl
                  | var_defn
                  | fct_decl
                  | fct_defn
                  | obj_decl
                  | obj_defn
                  ;*/

asgn: expr { $$ = $1; }
    | SMT_NAME OPR3 asgn {
        ast_variable* value = new ast_variable(scope_search($1));
        $$ = new ast_assign(value, $3); 
      }
    ;

expr: expr OPR0 term { $$ = new ast_operator($1, $2, $3); }
    | term { $$ = $1; }
    ;
term: fact OPR1 term { $$ = new ast_operator($1, $2, $3); }
    | fact { $$ = $1; }
    ;
fact: fact OPR2 unit { $$ = new ast_operator($1, $2, $3); }
    | unit { $$ = $1; }
    ;
unit: '(' expr ')' { $$ = $2; }
    | LITERAL {
        $$ = new ast_variable($1); 
        free($1);
      }
    | OPRU expr ')' { $$ = new ast_operator(nullptr, $1, $2); }
    | SMT_NAME {
        $$ = new ast_variable(scope_search($1)); }
    | '(' SMT_NAME OPR3 asgn ')' { 
        ast_variable* value = new ast_variable(scope_search($2));
        $$ = new ast_assign(value, $4);
      }
    ;

%%

/*!------------------------------------------------
/*!------------------------------------------------
/*! C++ functions */

void yyerror(const char * s){
  count_error++;
  printf("error - line %d: %s.\n", yylineno, s);
  exit(EXIT_FAILURE);
}

/* goes through every scope
 * could add extra time complexity
 */
item_data* scope_search(const std::string &id)
{
  if(0 == symbols.size())
    return nullptr;

  for (size_t scope = LAST_SCOPE;; scope--)
  {
    item_data* data = symbols[scope].get_data(id);
    if(data)
      return data;
    if (0 == scope)
      break;
  }

  return nullptr;
}

bool is_type(const std::string &id)
{
  return type_exists(id) || is_primitive(id);
}

/* a constant value can only be primitive */
bool is_compatible(const char *type, const char *constant_value)
{
  switch (constant_value[0])
  {
  default: // int
    if (nullptr == strchr(constant_value, '.'))
      if (strcmp(type, DATA_TYPE_INT))
        return false;

    // float
    if (strcmp(type, DATA_TYPE_FLT))
      return false;
    break;

  case '\'': // char
    if (strcmp(type, DATA_TYPE_CHR))
      return false;
    break;

  case 't': // bool
    if (strcmp(type, DATA_TYPE_BOL))
      return false;
    break;
  case 'f': // bool
    if (strcmp(type, DATA_TYPE_BOL))
      return false;
    break;

  case '\"': // string
    if (strcmp(type, DATA_TYPE_STR))
      return false;
    break;
  }

  return true;
}

int main(int argc, char** argv)
{
  if(argc != 2)
  {
    yyerror("wrong number of arguments");
    return EXIT_FAILURE;
  }

  FILE* ptr = fopen(argv[1], "r");
  if(nullptr == ptr)
  {
    yyerror("invalid file");
    return EXIT_FAILURE;
  }

  yyin = ptr;
  yyparse();
  return EXIT_SUCCESS;
}
