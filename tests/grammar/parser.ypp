%{
  #include <stdio.h>
  #include <cstring>
  #include <cmath>
  #include <string>
  #include <vector>

  extern int yylex();
  void yyerror(const char * s);

  extern FILE* yyin;
  extern char* yytext;
  extern int yylineno;
  size_t count_error;
%}

%left '&' '|'
%left "==" "!=" "<=" "<" ">=" ">"
%left '+' '-'
%left '*' '/' '%'
%left '(' ')'

%right '='
%right '^'

%code requires
{
  class ast_node;
  class ast_variable;
  class ast_operator;
}
%union {
  char* information;
  unsigned char character;
  ast_node* node;
}

%token SCOPE_BEGIN SCOPE_END
%token MASTER TYPEOF PRINTF

%token RSV_CLSS ACS_PRIV ACS_PUBL ACS_FILD

%token<information> SMT_NAME RSV_TYPE RSV_ARRY DEF_ARRY
%token<information> LITERAL

%token OPR_ASSIGN
%token<character> OPRU OPR0 OPR1 OPR2
%token<character> OPR_RELTON

%type expression
%type term
%type fact
%type powr

%token ACT_BREK ACT_CONT ACT_RTRN
%token SEQ_IFIF SEQ_ELSE SEQ_WHLE SEQ_FOOR

%start starting_symbol

%%
/*!------------------------------------------------
/*!------------------------------------------------
/*! declarations */

starting_symbol : global_declaration
                ;

global_declaration: MASTER
                    SCOPE_BEGIN
                    statement_list
                  | cls_decl global_declaration
                  | cls_defn global_declaration
                  | var_decl global_declaration
                  | var_defn global_declaration
                  | fct_decl global_declaration
                  | fct_defn global_declaration
                  | obj_decl global_declaration
                  | obj_defn global_declaration
                  ;

cls_decl: RSV_CLSS SMT_NAME ';'
        ;

cls_defn: RSV_CLSS SMT_NAME SCOPE_BEGIN cls_fild arr_fild
        | RSV_CLSS SMT_NAME SCOPE_BEGIN SCOPE_END
        ;

arr_fild: cls_fild arr_fild
        | SCOPE_END
        ;

/* 20 rules for field
 * 4 rules for variable
 * 8 rules for function
 * 2 rules for constructor
 * 4 rules for object
 * 2 rules for access specifier
 */

cls_fild: /** 4v rules */ 
/*1*/     RSV_TYPE SMT_NAME ';'
/*2*/   | RSV_ARRY SMT_NAME ';'
/*3*/   | RSV_TYPE SMT_NAME OPR_ASSIGN expression ';'
/*4*/   | RSV_ARRY SMT_NAME OPR_ASSIGN expression ';'
        
          /** 8f rules */
/*1*/   | RSV_TYPE SMT_NAME
          '(' parametr arr_parm
          SCOPE_BEGIN
          statement_list ';'

/*2*/   | RSV_ARRY SMT_NAME
          '(' parametr arr_parm
          SCOPE_BEGIN
          statement_list ';'
      
/*3*/   | RSV_TYPE SMT_NAME
          '('')'
          SCOPE_BEGIN
          statement_list ';'

/*4*/   | RSV_ARRY SMT_NAME
          '('')'
          SCOPE_BEGIN
          statement_list ';'
          
/*5*/   | SMT_NAME SMT_NAME
          '(' parametr arr_parm
          SCOPE_BEGIN
          statement_list ';'

/*6*/   | DEF_ARRY SMT_NAME
          '(' parametr arr_parm
          SCOPE_BEGIN
          statement_list ';'

/*7*/   | SMT_NAME SMT_NAME
          '(' ')'
          SCOPE_BEGIN
          statement_list ';'

/*8*/   | DEF_ARRY SMT_NAME
          '(' ')'
          SCOPE_BEGIN
          statement_list ';'

          /** 2c rules */
/*1*/   | SMT_NAME
          '(' parametr arr_parm
          SCOPE_BEGIN
          statement_list ';'

/*2*/   | SMT_NAME '(' ')'
          SCOPE_BEGIN
          statement_list ';'
        
          /** 4o rules */
/*1*/   | SMT_NAME SMT_NAME ';'
/*2*/   | DEF_ARRY SMT_NAME ';'
/*3*/   | SMT_NAME SMT_NAME OPR_ASSIGN SCOPE_BEGIN attribte obj_vals
/*4*/   | DEF_ARRY SMT_NAME OPR_ASSIGN SCOPE_BEGIN attribte obj_vals
        
          /** 2a rules */
        | ACS_PRIV
        | ACS_PUBL
        ;

/* 4v rules */
var_decl: RSV_TYPE SMT_NAME
        | RSV_ARRY SMT_NAME
        ;
var_defn: RSV_TYPE SMT_NAME OPR_ASSIGN expression
        | RSV_ARRY SMT_NAME OPR_ASSIGN expression
        ;

/* 8f rules */
fct_decl: RSV_TYPE SMT_NAME '(' parametr arr_parm
        | RSV_ARRY SMT_NAME '(' parametr arr_parm
        | RSV_TYPE SMT_NAME '(' ')'
        | RSV_ARRY SMT_NAME '(' ')'
        | SMT_NAME SMT_NAME '(' parametr arr_parm
        | DEF_ARRY SMT_NAME '(' parametr arr_parm
        | SMT_NAME SMT_NAME '(' ')'
        | DEF_ARRY SMT_NAME '(' ')'
        ;

/* 8f rules */
fct_defn: RSV_TYPE SMT_NAME '(' parametr arr_parm 
          SCOPE_BEGIN
          statement_list

        | RSV_ARRY SMT_NAME '(' parametr arr_parm 
          SCOPE_BEGIN
          statement_list

        | RSV_TYPE SMT_NAME '(' ')'
          SCOPE_BEGIN
          statement_list

        | RSV_ARRY SMT_NAME '(' ')'
          SCOPE_BEGIN
          statement_list

        | SMT_NAME SMT_NAME '(' parametr arr_parm
          SCOPE_BEGIN
          statement_list

        | DEF_ARRY SMT_NAME '(' parametr arr_parm
          SCOPE_BEGIN
          statement_list

        | SMT_NAME SMT_NAME '(' ')'
          SCOPE_BEGIN
          statement_list

        | DEF_ARRY SMT_NAME '(' ')'
          SCOPE_BEGIN
          statement_list
        ;

arr_parm: ',' parametr arr_parm
        | ')'
        ;

parametr: RSV_TYPE SMT_NAME
        | RSV_ARRY SMT_NAME
        | SMT_NAME SMT_NAME
        | DEF_ARRY SMT_NAME
        ;

/* 4o rules */
obj_decl: SMT_NAME SMT_NAME
        | DEF_ARRY SMT_NAME
        ;
obj_defn: SMT_NAME SMT_NAME OPR_ASSIGN SCOPE_BEGIN attribte obj_vals
        | DEF_ARRY SMT_NAME OPR_ASSIGN SCOPE_BEGIN attribte obj_vals
        ;
obj_vals: ',' attribte obj_vals
        | '}'
        ;
attribte: expression
        ;

/*!------------------------------------------------
/*!------------------------------------------------
/*! statements */

statement_list: SCOPE_END
              | statement statement_list
              ;

statement : local_declaration ';'
          | expression ';'
          | assignment ';'
          | ACT_BREK ';'
          | ACT_CONT ';'
          | ACT_RTRN expression ';'
          | control

local_declaration : var_decl
                  | var_defn
                  | fct_decl
                  | fct_defn
                  | obj_decl
                  | obj_defn
                  ;

expression: expression OPR0 term
          | expression OPR_RELTON term
          | term
          ;

term: fact OPR1 term
    | fact
    ;

fact: fact OPR2 powr
    | powr
    ;

powr: '(' expression ')'
    | LITERAL
    | OPRU expression ')'
    | SMT_NAME
    | SMT_NAME ACS_FILD SMT_NAME
    | SMT_NAME '[' LITERAL ']'
    | SMT_NAME '[' SMT_NAME ']'
    | PRINTF '(' expression ')'
    | TYPEOF '(' expression ')'
    | fct_call
    ;

fct_call: SMT_NAME '(' expression arr_argm
        | SMT_NAME '('')'
        ;
arr_argm: ',' expression arr_argm
        | ')'
        ;

control : SEQ_IFIF '(' expression ')' SCOPE_BEGIN statement_list
        | SEQ_IFIF '(' expression ')' SCOPE_BEGIN statement_list SEQ_ELSE SCOPE_BEGIN statement_list
        | SEQ_WHLE '(' expression ')' SCOPE_BEGIN statement_list
        | SEQ_FOOR '(' expression ';' expression ';' expression ')' SCOPE_BEGIN statement_list

assignment: SMT_NAME OPR_ASSIGN assig_term
          ;
assig_term: expression
          | assignment
          ;
%%

/*!------------------------------------------------
/*!------------------------------------------------
/*! C++ functions */

void yyerror(const char * s){
  count_error++;
  printf("error - line %d: %s.\n", yylineno, s);
  if(0 == strcmp(s, "syntax error"))
    printf("the program has %zu errors.\n", count_error);
}

int main(int argc, char** argv)
{
  if(argc != 2)
  {
    yyerror("wrong number of arguments");
    return EXIT_FAILURE;
  }

  FILE* ptr = fopen(argv[1], "r");
  if(nullptr == ptr)
  {
    yyerror("invalid file");
    return EXIT_FAILURE;
  }

  yyin = ptr;
  yyparse();
  return EXIT_SUCCESS;
}
