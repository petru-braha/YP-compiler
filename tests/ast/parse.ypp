%{
  #include <stdio.h>
  #include <cstring>
  #include <cmath>
  #include <string>
  #include <vector>
  #include "util.hpp"
  #include "arithmetic.hpp"
  #include "ast_base.hpp"

  int yylex();
  void yyerror(const char * s);

  extern FILE* yyin;
  extern char* yytext;
  extern int yylineno;
  size_t count_error;
%}

%left '&' '|'
%left "==" "!=" "<=" "<" ">=" ">"
%left '+' '-'
%left '*' '/' '%'
%left '(' ')'

%right '='
%right '^'

%code requires
{
  #include <vector>
  class ast_statement;
  class ast_expression;
  class ast_variable;
  class ast_operator;
}
%union {
  char* information;
  char character;
  ast_statement* s_node;
  ast_expression* e_node;
  std::vector<ast_statement*>* subtree;
}

%token SCOPE_BEGIN SCOPE_END
%token ACT_BREK ACT_CONT ACT_RTRN
%token SEQ_IFIF SEQ_ELSE SEQ_WHLE SEQ_FOOR

%token<information> LITERAL
%token<character> OPR0 OPR1 OPR2 OPR3 OPRU

%type<s_node> scope
%type<subtree> statement_list
%type<s_node> stat ctrl
%type<e_node> expr term fact powr unit

%start starting_symbol

%%
starting_symbol : scope { printf("inainte\n"); $1->evaluate(); printf("dupa\n"); delete $1; };

scope : SCOPE_BEGIN statement_list SCOPE_END { $$ = new ast_scope($2); }
      | SCOPE_BEGIN SCOPE_END { $$ = new ast_scope(nullptr); }

statement_list: stat { 
                  $$ = new std::vector<ast_statement*>;
                  char* evaluation = $1->evaluate();
          
                  $$->emplace_back($1);
                  printf("%s size : %d\n", evaluation, $$->size());

                }
              | statement_list stat {
                  $$->insert($$->begin(), $2);
                  printf("size : %d\n", $$->size());
                }
              ;

stat: expr ';' {
        $$ = $1;
        char* evaluation = $1->evaluate();
        printf("result: %s\n", evaluation);
        free(evaluation);
      }
    | ACT_BREK ';' { $$ = nullptr; }
    | ACT_CONT ';' { $$ = nullptr; }
    | ACT_RTRN expr ';' { $$ = nullptr; }
    | ctrl { $$ = $1; }
    ;

ctrl: SEQ_IFIF '(' expr ')' scope { $$ = new ast_ifelse($3, $5, nullptr); }
    | SEQ_IFIF '(' expr ')' scope SEQ_ELSE scope { $$ = new ast_ifelse($3, $5, $7); }
    | SEQ_WHLE '(' expr ')' scope { $$ = new ast_while($3, $5); }
    | SEQ_FOOR '(' expr ';' expr ';' expr ')' scope { $$ = new ast_for($3, $5, $7, $9);

        //char* evaluation = $3->evaluate();
        //printf("%s\n", evaluation);
      }
    ;

expr: expr OPR0 term { $$ = new ast_operator($1, $2, $3); }
    | term { $$ = $1; }
    ;
term: fact OPR1 term { $$ = new ast_operator($1, $2, $3); }
    | fact { $$ = $1; }
    ;
fact: fact OPR2 powr { $$ = new ast_operator($1, $2, $3); }
    | powr { $$ = $1; }
    ;
powr: powr OPR3 unit { $$ = new ast_operator($1, $2, $3); }
    | unit { $$ = $1; }
unit: '(' expr ')' { $$ = $2; }
    | LITERAL {
        $$ = new ast_variable($1); 
        free($1);
      }
    | OPRU expr ')' { $$ = new ast_operator(nullptr, $1, $2); }
    ;

%%

/*!------------------------------------------------
/*!------------------------------------------------
/*! C++ functions */

void yyerror(const char * s){
  count_error++;
  printf("error - line %d: %s.\n", yylineno, s);
}

int main(int argc, char** argv)
{
  if(argc != 2)
  {
    yyerror("wrong number of arguments");
    return EXIT_FAILURE;
  }

  FILE* ptr = fopen(argv[1], "r");
  if(nullptr == ptr)
  {
    yyerror("invalid file");
    return EXIT_FAILURE;
  }

  yyin = ptr;
  yyparse();
  return EXIT_SUCCESS;
}
