%{
  #include <stdio.h>
  #include <cstring>
  #include <cmath>
  #include <string>
  #include <vector>
  #include "util.hpp"
  #include "arithmetic.hpp"
  #include "ast_base.hpp"
  #include "ast_sttm.hpp"

  int yylex();
  void yyerror(const char * s);

  extern FILE* yyin;
  extern char* yytext;
  extern int yylineno;
  size_t count_error;
  bool expression_flot;
%}

%left '&' '|'
%left "==" "!=" "<=" "<" ">=" ">"
%left '+' '-'
%left '*' '/' '%'
%left '(' ')'

%right '='
%right '^'

%code requires
{
  class ast_node;
  class ast_variable;
  class ast_operator;
}
%union {
  char* information;
  char character;
  ast_node* node;
}

%token<information> LITERAL

// %token OPR_ASSIGN
%token<character> OPRU OPR0 OPR1 OPR2
%token<character> OPR_RELTON

%type<node> expression
%type<node> term
%type<node> fact
%type<node> powr

%start starting_symbol

%%

starting_symbol : 'a'
                | expression { 
                    char* evaluation = $1->evaluate();
                    printf("result: %s\n", evaluation);
                    free(evaluation);
                    delete $1;
                    expression_flot = false;
                  }
                ;

expression: expression OPR0 term {
              $$ = new ast_operator($1, $2, $3);
            }
          | expression OPR_RELTON term {
              $$ = new ast_operator($1, $2, $3);
            }
          | term {
              $$ = $1; 
            }
          ;
term: fact OPR1 term {
        $$ = new ast_operator($1, $2, $3);
      }
    | fact {
        $$ = $1;
      }
    ;
fact: fact OPR2 powr {
        $$ = new ast_operator($1, $2, $3);
      }
    | powr {
        $$ = $1;
      }
    ;
powr: '(' expression ')' { 
        $$ = $2;
      }
    | LITERAL {
        expression_flot =
          std::string("float") == type_of($1) ? true : false;
        $$ = new ast_variable($1); 
        free($1);
      }
    | OPRU expression ')' {
        if('-' == $1)
        {
          char hardcoded[4] = "0.0";
          if(false == expression_flot)
            hardcoded[1] = '\0';
          ast_variable* n0 = new ast_variable(hardcoded);
          $$ = new ast_operator(n0, $1, $2);
        }
        else
        {
          ast_variable* n0 = new ast_variable("true");
          $$ = new ast_operator(n0, XOR_CHR, $2);
        }
      }
    ;
%%

/*!------------------------------------------------
/*!------------------------------------------------
/*! C++ functions */

void yyerror(const char * s){
  count_error++;
  printf("error - line %d: %s.\n", yylineno, s);
}

int main(int argc, char** argv)
{
  if(argc != 2)
  {
    yyerror("wrong number of arguments");
    return EXIT_FAILURE;
  }

  FILE* ptr = fopen(argv[1], "r");
  if(nullptr == ptr)
  {
    yyerror("invalid file");
    return EXIT_FAILURE;
  }

  yyin = ptr;
  yyparse();
  return EXIT_SUCCESS;
}
