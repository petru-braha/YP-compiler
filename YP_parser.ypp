%{
#include <stdio.h>
#include <cstring>
#include <string>
#include <vector>

#include "YP_utility.hpp"

extern int yylex();
void yyerror(const char * s);

extern FILE* yyin;
extern char* yytext;
extern int yylineno;
extern bool method_master_started;

// declaration stuff
#define LAST_SCOPE symbols.size() - 1
std::string last_function;
std::string last_variable;
std::string last_object;
std::string last_name_type;

std::vector<symbol_table> symbols;
int count_error;

bool already_defined(const char* name)
{
  for(size_t i = LAST_SCOPE; ; i--)
  {
    if(symbols[LAST_SCOPE].exists(name))
    {
      yyerror("variable already defined");
      return true;
    }

    if(0 == i) break;
  }

  return false;
}

%}

// the number of started scopes == symbols.size();
//------------------------------------------------
//------------------------------------------------

%union {
    char* token_name;
    /*
    int basic_int;
    float basic_float;
    char basic_chr;
    std::string basic_str;
    bool basic_bol; */
}

%type method_master
%type<token_name> cst_call
%token<token_name> method_type method_print
%token R_CLS A_PRV A_PUB A_FLD
%token OPERATOR_ASSIGN OPERATOR_RELTIN

%token<token_name> S_NME R_TYP
%token<token_name> C_INT C_FLT C_CHR C_STR C_BOL

%token R_SEQ_IF R_SEQ_FOR R_SEQ_WHL

%start starting_symbol

%%
starting_symbol : { symbols.emplace_back(); } global_declaration { 
                        if(0 == count_error) 
                          printf("the program was compiled correctly.\n");
                        else
                          printf("the program has %d errors.\n", count_error);
                        };

scope_begin : '{' { symbols.emplace_back(); };
scope_end   : '}' { symbols.pop_back(); };
method_master   : scope_begin statement_list;

//------------------------------------------------

/* class = type */
/* declaration, definition and call states for class
* class
* function
* variable
* object */

/*! class states */
cls_decl: R_CLS S_NME ';' { /* this case will never occur: 
                if(scopes_started) yyerror("classes can only be declared globally");*/ free($2); }
        | cls_defn
        ;
arr_fild: fct_defn { type_table[last_name_type.c_str()].add_fct_field(last_function.c_str()); } arr_fild
        | var_decl { type_table[last_name_type.c_str()].add_var_field(last_variable.c_str()); } arr_fild
        | obj_decl { type_table[last_name_type.c_str()].add_obj_field(last_object.c_str()); } arr_fild
        | A_PRV arr_fild
        | A_PUB arr_fild
        | scope_end
        ;
cls_defn: R_CLS S_NME scope_begin {
                last_name_type = $2;
                type_add(last_name_type.c_str()); } arr_fild { free($2); }
        ;
/* cls_call is not needed for now */

/*! function states */
fct_decl: R_TYP S_NME fct_synp ';' { /*table.add ($2, $1, nullptr);*/ 
                free($1); free($2);
                }
        | fct_defn
        ;
fct_synp: '(' arr_parm ')'
        | '('')'
arr_parm: R_TYP S_NME ',' arr_parm { /* how to free? */ } // free($1); free($2); }
        | R_TYP S_NME
        ;
fct_defn: R_TYP S_NME fct_synp scope_begin statement_list { free($1); free($2); } ;
argument: S_NME | cst_call;
arr_argm: argument ',' arr_argm
        | argument
        ;
fct_call: S_NME '(' arr_argm ')' { /* provide return capacity */ free($1); } ;
        | S_NME '(' ')' { /* provide return capacity */ free($1); } ;

/*! variable states */
var_decl: R_TYP S_NME ';' { if(false == already_defined($2)) symbols[LAST_SCOPE].add($2, $1, SYNOPSIS);
                free($1); free($2); }
        | var_defn
        ;
var_defn: R_TYP S_NME OPERATOR_ASSIGN S_NME ';' {
                bool variable_defined = already_defined($2);
                
                const instance_data *argument_defined = nullptr;
                for(size_t i = LAST_SCOPE; ; i--)
                {
                  argument_defined = symbols[LAST_SCOPE].exists($4);
                        
                  if(argument_defined &&
                  ITEM_TYPE_VAR == argument_defined->get_item_type() &&
                  0 == strcmp($1, argument_defined->get_data_type()) &&
                  false == variable_defined){ 
                    symbols[LAST_SCOPE].add($2, $1, SYNOPSIS);
                    // $2.synopsis = value;
                    break;
                  }

                  if(argument_defined) yyerror("incorrect parameter type");
                  if(0 == i) break;
                }

                if(nullptr == argument_defined)
                  yyerror("identifier not found");
                free($1); free($2); free($4);
                }

        | R_TYP S_NME OPERATOR_ASSIGN cst_call ';' {
                bool variable_defined = already_defined($2);
                
                void* value = nullptr;
                switch($4[0])
                {     
                default: // number
                  if(nullptr == strchr($4, '.')) // int
                  {
                    if(strcmp($1, DATA_TYPE_INT))
                      yyerror("incorrect parameter type");
                    value = new int(atoi($4));
                    break;
                  }
                  
                  // float
                  if(strcmp($1, DATA_TYPE_FLT))
                    yyerror("incorrect parameter type");
                  value = new float(std::stof($4));
                  break;

                case '\'': // char
                  if(strcmp($1, DATA_TYPE_CHR))
                    yyerror("incorrect parameter type");
                  value = new char($4[1]);
                  break;
                
                case 't': // bool
                  if(strcmp($1, DATA_TYPE_BOL))
                    yyerror("incorrect parameter type");
                  value = new bool(true);
                  break;
                case 'f': // bool
                  if(strcmp($1, DATA_TYPE_BOL))
                    yyerror("incorrect parameter type");
                  value = new bool(false);
                  break;
                
                case '\"': // string
                  if(strcmp($1, DATA_TYPE_STR))
                    yyerror("incorrect parameter type");
                  std::string cst_str($4);
                  value = new std::string(cst_str);
                  break;
                }

                // $2.synopsis = value;
                delete (char*)value;
                if(false == variable_defined)
                  symbols[LAST_SCOPE].add($2, $1, SYNOPSIS);
                free($1); free($2);
                };

var_call: S_NME {
                const instance_data *argument_defined = nullptr;
                for(size_t i = LAST_SCOPE; ; i--)
                {
                  argument_defined = symbols[LAST_SCOPE].exists($1);
                  if(argument_defined) break;
                  if(0 == i) break;
                }
                
                if(nullptr == argument_defined)
                  yyerror("identifier not found");
                free($1);
                };

/*! object states */
obj_decl: S_NME S_NME ';' { if(!type_exists($1)) yyerror("undefined type"); 
                free($1); free($2); }
        | obj_defn
        ;
obj_defn: S_NME S_NME OPERATOR_ASSIGN scope_begin scope_end ';' { if(!type_exists($1)) yyerror("undefined type"); };
fld_call: S_NME A_FLD S_NME { /* search type, search field */ } ;
obj_call: S_NME ;

/*! text constant states */
cst_call: C_INT { free($1); }
        | C_FLT { free($1); }
        | C_CHR { free($1); }
        | C_STR { free($1); }
        | C_BOL { free($1); }
        ;

/*! declaration parser */
global_declaration      : cls_decl global_declaration
	                | fct_decl global_declaration
	                | var_decl global_declaration
                        | obj_decl global_declaration
                        | ';' global_declaration | cst_call ';' global_declaration
                        | method_master
	                ;
local_declaration       : fct_decl local_declaration | fct_decl
                        | var_decl local_declaration | var_decl
                        | obj_decl local_declaration | obj_decl
                        ;

//------------------------------------------------

/*! statements */
statement_list  : statement_parse statement_list
                | scope_begin statement_list scope_end /* adds scopes for the fun of it */
                | scope_end /* halting condition */
                ;

/* statements types and parsing technique */
statement_parse : statement_easy
                | statement_bool
                | statement_assg
                | method_type ';'
                | method_print ';' { std::string s = $1 + 6; s[s.size() - 1] = '\0'; printf("%s", s.c_str()); }
                // | statement_cond
                // | local_declaration
                ;
call_parse      : fct_call
                | var_call
                | fld_call
                // | obj_call
                | cst_call
                ;

/* redundant statementes */
 statement_easy  : call_parse ';' | ';' ;

/* assignation statement */// here is needed a recursive approach
statement_assg  : S_NME OPERATOR_ASSIGN call_parse ';'
                | S_NME OPERATOR_ASSIGN method_type ';'
                | S_NME OPERATOR_ASSIGN method_print ';'
                ;

/* bool returning statements */
statement_bool  : S_NME OPERATOR_RELTIN S_NME ;

/* conditional statements */
condition_append: ';'
                | statement_parse
                | scope_begin statement_list scope_end
                | scope_begin scope_end
                ;
// statement_if    : R_SEQ_IF '(' statement_bool ')' condition_append;
// statement_for   : R_SEQ_FOR '(' /* declare */ ';' statement_bool ';' /* statement */ ')' condition_append;
// statement_whl   : R_SEQ_WHL '(' statement_bool ')' condition_append;
// statement_cond  : statement_if ;//| statement_for | statement_whl;

%%

//------------------------------------------------
//------------------------------------------------
// C++ functions:

void yyerror(const char * s){
    count_error++;
    printf("error - line %d: %s.\n", yylineno, s);
}

int main(int argc, char** argv)
{
    if(argc != 2)
    {
        yyerror("wrong number of arguments");
        return EXIT_FAILURE;
    }

    FILE* ptr = fopen(argv[1],"r");
    if(nullptr == ptr)
    {
        yyerror("invalid file");
        return EXIT_FAILURE;
    }

    yyin = ptr;
    yyparse();
    return EXIT_SUCCESS;
}
