/* comments:
 * YP_parser.ypp - bottom-up parser, LARL(1) grammar
 * (c) authors - Braha Petru Bogdan - <petrubraha@gmail.com>
 * run command example: ./YP exs/success/declaration/class/declaration.txt
 * run command example: ./YP exs/fail/declaration/class/field\ 0.txt
 
 * rules' summary
  * declarations
  ** primitive
  ** function
  ** object
  ** class
  * statements
  ** expression
  ** fct_call
  ** control

 * order of function rules
  ** yes parameters - no  array
  ** yes parameters - yes array
  ** no  parameters - no  array
  ** no  parameters - yes array
 */

%{
  #include "src/implementation.hpp"

  #include "src/ast_expression.hpp"
  #include "src/ast_call.hpp"
  #include "src/ast_indexing.hpp"
  
  #include "src/ast_definition.hpp"
  #include "src/ast_action.hpp"
  #include "src/ast_scope.hpp"
  #include "src/ast_control.hpp"
%}

%left '&' '|'
%left "==" "!=" "<=" "<" ">=" ">"
%left '+' '-'
%left '*' '/' '%'
%left '(' ')'

%right '='
%right '^'

%code requires
{
  #include <vector>
  
  class ast_statement;
  class ast_definition;
  class ast_expression;
}
%union {
  char* information;
  char character;

  ast_statement* s_node;
  ast_definition* d_node;
  ast_expression* e_node;
  std::vector<ast_statement*>* subast;
  std::vector<ast_definition*>* subdef;
  std::vector<ast_expression*>* subexp;
}

%token SCOPE_BEGIN SCOPE_END
%token TYPEOF PRINTF MASTER

%token RSV_CLSS ACS_PRIV ACS_PUBL ACS_FILD
%token<character> OPR0 OPR1 OPR2 OPR3 OPRU
%token<information> LITERAL

%token ACT_BREK ACT_CONT ACT_RTRN
%token SEQ_IFIF SEQ_ELSE SEQ_WHLE SEQ_FOOR

%token<information> RSV_TYPE RSV_ARRY SMT_NAME DEF_ARRY

%start entrance
%type<subast> global

%type<d_node> prm_decl prm_defn
%type<d_node> fct_decl fct_defn
%type<subdef> synopsis
%type<subdef> arr_parm
%type<d_node> parametr

%type<d_node> obj_decl obj_defn
%type<subexp> arr_attr

%type<s_node> cls_decl cls_defn
%type<subdef> arr_fild
%type<d_node> cls_fild

%type<subast> scope
%type<subast> arr_stat
%type<s_node> stat ctrl decl
%type<e_node> expr term fact unit asgn
%type<subexp> arr_argm

%%

/*! declaration */

/* 4v rules */
prm_decl: RSV_TYPE SMT_NAME {
            $$ = new ast_primitivedefn($1, $2);
          }
        | RSV_ARRY SMT_NAME {
            $$ = new ast_primitivedefn($1, $2);
          }
        ;
prm_defn: RSV_TYPE SMT_NAME OPR3 asgn {
            $$ = new ast_primitivedefn($1, $2, $4); }
        | RSV_ARRY SMT_NAME OPR3 asgn {
            $$ = new ast_primitivedefn($1, $2, $4); }
        ;

/* 8f rules */
fct_decl: RSV_TYPE SMT_NAME synopsis { $$ = new ast_functiondefn($1, $2, $3); }
        | RSV_ARRY SMT_NAME synopsis { $$ = new ast_functiondefn($1, $2, $3); }
        | SMT_NAME SMT_NAME synopsis { $$ = new ast_functiondefn($1, $2, $3); }
        | DEF_ARRY SMT_NAME synopsis { $$ = new ast_functiondefn($1, $2, $3); }
        ;
fct_defn: RSV_TYPE SMT_NAME synopsis scope {
            $$ = new ast_functiondefn($1, $2, $3, $4);
          }
        | RSV_ARRY SMT_NAME synopsis scope {
            $$ = new ast_functiondefn($1, $2, $3, $4);
          }
        | SMT_NAME SMT_NAME synopsis scope {
            $$ = new ast_functiondefn($1, $2, $3, $4);
          }
        | DEF_ARRY SMT_NAME synopsis scope {
            $$ = new ast_functiondefn($1, $2, $3, $4);
          }
        ;
synopsis: '(' arr_parm parametr ')' { $2->emplace_back($3); $$ = $2; }
        | '(' ')' { $$ = new std::vector<ast_definition*>(); }
        ;
arr_parm: arr_parm parametr ',' { $1->emplace_back($2); $$ = $1; }
        | /* epsilon */ { $$ = new std::vector<ast_definition*>(); }
        ;
parametr: prm_decl { $$ = $1; }
        | prm_defn { $$ = $1; }
        | obj_decl { $$ = $1; }
        | obj_defn { $$ = $1; }
        ;

/* 4o rules */
obj_decl: SMT_NAME SMT_NAME { $$ = new ast_objectdefn($1, $2); }
        | DEF_ARRY SMT_NAME { $$ = new ast_objectdefn($1, $2); }
        ;
obj_defn: SMT_NAME SMT_NAME OPR3 '{' arr_attr asgn '}' {
            $5->emplace_back($6);
            $$ = new ast_objectdefn($1, $2, $5);
          }
        | DEF_ARRY SMT_NAME OPR3 '{' arr_attr asgn '}' {
            $5->emplace_back($6);
            $$ = new ast_objectdefn($1, $2, $5);
          }
        ;
arr_attr: arr_attr asgn ',' { $1->emplace_back($2); $$ = $1; }
        | /* epsilon */ { $$ = new std::vector<ast_expression*>(); }
        ;

/* 3c rules */
cls_decl: RSV_CLSS SMT_NAME { $$ = new ast_classdefn($2); }
        ;
cls_defn: RSV_CLSS SMT_NAME SCOPE_BEGIN arr_fild SCOPE_END {
            $$ = new ast_classdefn($2, $4);
          }
        | RSV_CLSS SMT_NAME SCOPE_BEGIN SCOPE_END {
            $$ = new ast_classdefn($2,
              new std::vector<ast_definition*>());
          }
        ;
arr_fild: arr_fild cls_fild {
            if($2 != nullptr)
              $1->emplace_back($2);
            $$ = $1; 
          }
        | cls_fild {
            $$ = new std::vector<ast_definition*>();
            if($1 != nullptr)
              $$->emplace_back($1);
          }
        ;
cls_fild: prm_decl { $$ = $1; }
        | prm_defn { $$ = $1; }
        | fct_defn { $$ = $1; }
        | obj_decl { $$ = $1; }
        | obj_defn { $$ = $1; }
        | ACS_PRIV { $$ = nullptr; yyaccess = ACCS_MODF_PRIV; }
        | ACS_PUBL { $$ = nullptr; yyaccess = ACCS_MODF_PUBL; }
        ;

/*
__    __
| \  / |
 \    / 
  \  /
   \/

*/

/*! statements */

entrance: global {
            // here, the source file is completetly read
            // $1->at(0) is the master function
            initialize_compiler();
            for(size_t i = 1; i < $1->size(); i++)
              $1->at(i)->evaluate();
            $1->at(0)->evaluate();
            for(size_t i = 1; i < $1->size(); i++)
              delete $1->at(i);
            delete $1->at(0);
            delete $1;
            
            if(0 == count_error)
              printf("the program was compiled correctly.\n");
            else
              printf("the program has %zu errors.\n", count_error);
          }
        //| test
        ;

/*test: SMT_NAME { printf("f"); }
    | SMT_NAME OPR3 test { printf("t"); }
    ;*/

global: global decl ';' { $1->emplace_back($2); $$ = $1; }
      | global cls_decl ';' { $1->emplace_back($2); $$ = $1; }
      | global cls_defn ';' { $1->emplace_back($2); $$ = $1; }
      | MASTER scope {
          $$ = new std::vector<ast_statement*>();
          $$->emplace_back(new ast_scope($2));
        }
      ;

scope : SCOPE_BEGIN arr_stat SCOPE_END { $$ = $2; }
      | SCOPE_BEGIN SCOPE_END { $$ = new std::vector<ast_statement*>(); }
      ;

arr_stat: arr_stat stat { $1->emplace_back($2); $$ = $1; }
        | stat {
            $$ = new std::vector<ast_statement*>;
            $$->emplace_back($1);
          }
        ;

stat: asgn ';' { $$ = $1; }
    | ACT_BREK ';' { $$ = new ast_action(ACT_BREAK); }
    | ACT_CONT ';' { $$ = new ast_action(ACT_CONTINUE); }
    | ACT_RTRN asgn ';' { $$ = new ast_return($2); }
    | decl ';' { $$ = $1; }
    | ctrl { $$ = $1; }
    | scope { $$ = new ast_scope($1); }
    ;

decl: prm_decl { $$ = new ast_scopedefn($1); }
    | prm_defn { $$ = new ast_scopedefn($1); }
    | fct_decl { $$ = new ast_scopedefn($1); }
    | fct_defn { $$ = new ast_scopedefn($1); }
    | obj_decl { $$ = new ast_scopedefn($1); }
    | obj_defn { $$ = new ast_scopedefn($1); }
    ;

asgn: expr { $$ = $1; }
    | SMT_NAME OPR3 asgn {
        ast_symbolcall* id = new ast_symbolcall($1);
        $$ = new ast_assign(id, $3);
      }
    ;

expr: expr OPR0 term { $$ = new ast_operator($1, $2, $3); }
    | term { $$ = $1; }
    ;
term: fact OPR1 term { $$ = new ast_operator($1, $2, $3); }
    | fact { $$ = $1; }
    ;
fact: fact OPR2 unit { $$ = new ast_operator($1, $2, $3); }
    | unit { $$ = $1; }
    ;
unit: '(' asgn ')' { $$ = $2; }
    | OPRU asgn ')' { 
        $$ = new ast_operator(
          new ast_constant((char*)"0"), $1, $2);
      }

    // variable
    | LITERAL { $$ = new ast_constant($1); }
    | SMT_NAME { $$ = new ast_symbolcall($1); }
    
    // function
    | TYPEOF '(' asgn ')' { $$ = new ast_vanillacall($3, VNL_TYPEOF); }
    | PRINTF '(' asgn ')' { $$ = new ast_vanillacall($3, VNL_PRINTF); }
    | SMT_NAME '('')' {
        $$ = new ast_methodcall(
          new ast_symbolcall($1),
          new std::vector<ast_expression*>()); 
      }
    | SMT_NAME '(' arr_argm asgn ')' { 
        $3->emplace_back($4);
        $$ = new ast_methodcall(
          new ast_symbolcall($1),
          $3);
      }

    // object
    | SMT_NAME ACS_FILD SMT_NAME { 
        $$ = new ast_fielding(
          new ast_symbolcall($1),
          $3);
      }
    | SMT_NAME ACS_FILD SMT_NAME '('')' { 
        $$ = new ast_fieldcall(
          new ast_symbolcall($1),
          $3,
          new std::vector<ast_expression*>());
      }
    | SMT_NAME ACS_FILD SMT_NAME '(' arr_argm expr ')'{
        $5->emplace_back($6);
        $$ = new ast_fieldcall(
          new ast_symbolcall($1), 
          $3, $5);
      }

    // array
    | SMT_NAME '[' asgn ']' { 
        $$ = new ast_indexing(
          new ast_symbolcall($1),
          $3);
      }
    ;

arr_argm: arr_argm asgn ',' { $1->emplace_back($2); $$ = $1; }
        | /*epsilon*/ { $$ = new std::vector<ast_expression*>(); }
        ;

ctrl: SEQ_IFIF '(' asgn ')' scope {
          $$ = new ast_ifelse($3, 
            new ast_scope_control($5), 
            new ast_scope_control(
              new std::vector<ast_statement*>())); 
        }
    | SEQ_IFIF '(' asgn ')' scope SEQ_ELSE scope {
          $$ = new ast_ifelse($3, 
            new ast_scope_control($5), 
            new ast_scope_control($7));
        }
    | SEQ_WHLE '(' asgn ')' scope {
          $$ = new ast_while($3, 
            new ast_scope_control($5));
        }
    | SEQ_FOOR '(' stat ';' asgn ';' stat ')' scope {
          $$ = new ast_for($3, $5, $7, 
            new ast_scope_control($9));
        }
    ;
%%

//------------------------------------------------

int main(int argc, char** argv)
{
  if(argc != 2)
  {
    yyerror("wrong number of arguments");
    return EXIT_FAILURE;
  }

  FILE* ptr = fopen(argv[1], "r");
  if(nullptr == ptr)
  {
    yyerror("invalid file");
    return EXIT_FAILURE;
  }

  yyin = ptr;
  yyparse();
  return EXIT_SUCCESS;
}
