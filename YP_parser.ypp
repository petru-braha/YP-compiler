/* YP_parser.ypp - bottom-up parser, LARL(1) grammar
 * (c) authors - Braha Petru Bogdan - <petrubraha@gmail.com>
 *             - Meraru Ioan Lucian - <https://github.com/Zamdacmalfal>
 * building the compiler: ./build
 *
 */

%{
#include <stdio.h>
#include <cstring>
#include <string>
#include <vector>
#include "YP_utility.hpp"

extern int yylex();
void yyerror(const char * s);

extern FILE* yyin;
extern char* yytext;
extern int yylineno;
extern bool method_master_started;
size_t count_error;

std::string cls_last_name;
function_data* f_data_global;
object_data* o_data_global;
function_data::it fctit_global;
object_data::it objit_global;

std::vector<symbol_table> symbols;
#define LAST_SCOPE symbols.size() - 1
%}

/* comments
 *!* compilation should never throw exceptions *!*
 
 * states:
 ** declaration
 ** definition
 ** call
 * order of state presentation:
 ** class
 ** variable
 ** function
 ** object
 * statements

 * class == type
 * the number of started scopes == symbols.size(); 
 * exception: symbol table insertions won't provide error messages

 * how error checks are written: 
    for each terminal/non-terminal we perform checks
    we start with the first one and continue consecutively
 */

//%left boolop
%left '+' '-' 
%left '*' '/' '%'
%left '(' ')'

%right '='
%right '^'

/*!------------------------------------------------
/*!------------------------------------------------
/*! grammar */

%union {
    char* token_name;
}

%type method_master // method_print method_type
%token R_CLS A_PRV A_PUB /*A_FLD*/

%type<token_name> cst_call
%token<token_name> SMT_NAME RSV_TYPE
%token<token_name> LIT_INTG LIT_FLOT LIT_CHAR LIT_STRG LIT_BOOL

// %token R_SEQ_IF R_SEQ_FOR R_SEQ_WHL
%token OPERATOR_ASSIGN
// %token OPERATOR_RELTIN

%token<token_name> OPR_INTG OPR_FLOT OPR_CHAR OPR_STRG OPR_BOOL U_OPR_BOOL

%start starting_symbol

%%
starting_symbol : { symbols.emplace_back(); } global_declaration {
                    if(0 == count_error)
                      printf("the program was compiled correctly.\n");
                    else
                      printf("the program has %zu errors.\n", count_error);
                  };

/*!------------------------------------------------
/*! class states */

cls_decl: R_CLS SMT_NAME ';' {
            if(size_t(-1) != scope_search($2))
              yyerror("identifier already defined");
            if(LAST_SCOPE)
              yyerror("classes can only be declared globally");
              free($2);
          }
        | cls_defn;

cls_defn: R_CLS SMT_NAME '{' { // scope_begin => emplaces back
            bool is_error = false, error_flag = false;
            
            error_flag |= is_error =
              size_t(-1) != scope_search($2);
            if(is_error)
              yyerror("identifier already defined");
            
            error_flag |= is_error = 0 != LAST_SCOPE;
            if(is_error)
              yyerror("classes can only be declared globally");
            
            // success
            if(false == error_flag)
            {
              cls_last_name = $2;
              type_insert(cls_last_name, symbol_table($2));
            }
          }

          arr_fild {
            cls_last_name.clear();
            free($2);
          }
        ;

          /*! 3 variable rules */
arr_fild: RSV_TYPE SMT_NAME ';' {
            bool is_error = false, error_flag = false;

            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");

            error_flag |= is_error =
              type_exists(cls_last_name)->get_data($2);
            if(is_error)
              yyerror("identifier already defined in class");
            
            // success
            if(false == error_flag)
            {
              variable_data v_data($1);
              type_exists(cls_last_name)->insert($2, &v_data);
            }
            
            free($1); free($2);
          } arr_fild

        | RSV_TYPE SMT_NAME OPERATOR_ASSIGN SMT_NAME ';' {
            bool is_error = false, error_flag = false;
            
            error_flag |= is_error = is_type($2) || is_type($4);
            if(is_error)
              yyerror("type treated as an identifier");

            error_flag |= is_error =
              type_exists(cls_last_name)->get_data($2);
            if(is_error)
              yyerror("identifier already defined in class");
            
            item_data* argument = nullptr;
            size_t scope = scope_search($4);
            if(size_t(-1) != scope)
              argument = symbols.at(scope).get_data($4);
            else
              argument = type_exists(cls_last_name)->get_data($4);
                        
            error_flag |= is_error = (nullptr == argument) ||
                (argument && std::string($2) == std::string($4));
            if(is_error)
              yyerror("undefined argument");
            
            // success
            if(false == error_flag)
            {
              variable_data v_data($1, *(variable_data*)argument);
              type_exists(cls_last_name)->insert($2, &v_data);
            }
            
            free($1); free($2); free($4);
          } arr_fild

        | RSV_TYPE SMT_NAME OPERATOR_ASSIGN cst_call ';' {
            bool is_error = false, error_flag = false;

            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");

            error_flag |= is_error =
              type_exists(cls_last_name)->get_data($2);
            if(is_error)
              yyerror("identifier already defined in class");
            
            // success
            if(false == error_flag)
            {
                variable_data v_data($1, $4);
                type_exists(cls_last_name)->insert($2, &v_data);
            }

            free($1); free($2); free($4);
          } arr_fild

        /*! 5 function rules */

        // constructors
        | SMT_NAME {
            bool is_error = false, error_flag = false;

            // it must be a type - the class type
            error_flag |= is_error =
              std::string($1) != cls_last_name;
            if(is_error)
              yyerror("constructor should be labeled as class");

            // success
            if(false == error_flag)
            {
              function_data f_data($1);
              type_exists(cls_last_name)->insert($1, &f_data);
              f_data_global = (function_data*)
                type_exists(cls_last_name)->get_data($1);
            }} '(' arr_parm scope_begin statement_list {
            f_data_global = nullptr;
            free($1);
          } arr_fild

        | RSV_TYPE SMT_NAME {
            bool is_error = false, error_flag = false;

            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");
            
            error_flag |= is_error =
              type_exists(cls_last_name)->get_data($2);
            if(is_error)
              yyerror("identifier already defined in class");

            // success
            if(false == error_flag)
            {
              function_data f_data($1);
              type_exists(cls_last_name)->insert($2, &f_data);
              f_data_global = (function_data*)
                type_exists(cls_last_name)->get_data($2);
            }} '(' parametr arr_parm scope_begin statement_list {
              f_data_global = nullptr;
              free($1); free($2);
          } arr_fild
        | RSV_TYPE SMT_NAME {
            bool is_error = false, error_flag = false;

            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");
            
            error_flag |= is_error =
              type_exists(cls_last_name)->get_data($2);
            if(is_error)
              yyerror("identifier already defined in class");

            // success
            if(false == error_flag)
            {
              function_data f_data($1);
              type_exists(cls_last_name)->insert($2, &f_data);
            }} '('')' scope_begin statement_list {
              free($1); free($2);
          } arr_fild
        
        | SMT_NAME SMT_NAME {
            bool is_error = false, error_flag = false;

            error_flag |= is_error = 
              nullptr == type_exists($1);
            if(is_error)
              yyerror("undefined type");
            
            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");
            
            error_flag |= is_error =
              type_exists(cls_last_name)->get_data($2);
            if(is_error)
              yyerror("identifier already defined in class");

            // success
            if(false == error_flag)
            {
              function_data f_data($1);
              type_exists(cls_last_name)->insert($2, &f_data);
              f_data_global = (function_data*)
                type_exists(cls_last_name)->get_data($2);
            }} '(' parametr arr_parm scope_begin statement_list {
              f_data_global = nullptr;
              free($1); free($2); 
          } arr_fild
        | SMT_NAME SMT_NAME {
            bool is_error = false, error_flag = false;

            error_flag |= is_error = 
              nullptr == type_exists($1);
            if(is_error)
              yyerror("undefined type");
            
            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");
            
            error_flag |= is_error =
              type_exists(cls_last_name)->get_data($2);
            if(is_error)
              yyerror("identifier already defined in class");

            // success
            if(false == error_flag)
            {
              function_data f_data($1);
              type_exists(cls_last_name)->insert($2, &f_data);
            }} '('')' scope_begin statement_list {
              free($1); free($2); 
          } arr_fild

        /*! 3 object rules */
        | SMT_NAME SMT_NAME ';' {
            bool is_error = false, error_flag = false;
        
            error_flag |= is_error =
              nullptr == type_exists($1);
            if(is_error)
              yyerror("undefined type");
            
            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");
              
            error_flag |= is_error =
              type_exists(cls_last_name) &&
              type_exists(cls_last_name)->get_data($2);
            if(is_error)
              yyerror("identifier already defined in class");
            
            // success
            if(false == error_flag)
            {
              object_data o_data($1);
              type_exists(cls_last_name)->insert($2, &o_data);
            }

            free($1); free($2); 
          } arr_fild

        | SMT_NAME SMT_NAME OPERATOR_ASSIGN SMT_NAME ';' {
            bool is_error = false, error_flag = false;
            
            error_flag |= is_error =
              nullptr == type_exists($1);
            if(is_error)
              yyerror("undefined type");

            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");
              
            error_flag |= is_error =
              type_exists(cls_last_name) &&
              type_exists(cls_last_name)->get_data($2);
            if(is_error)
              yyerror("identifier already defined in class");

            item_data* argument = nullptr;
            size_t scope = scope_search($4);
            if(size_t(-1) != scope)
              argument = symbols.at(scope).get_data($4);
            else
              argument = type_exists(cls_last_name)->get_data($4);

            error_flag |= is_error = (nullptr == argument) ||
                (argument && std::string($2) == std::string($4));
            if(is_error)
              yyerror("undefined argument");
              
            // success
            if(false == error_flag)
            {
              object_data o_data($1, *(object_data*)argument);
              type_exists(cls_last_name)->insert($2, &o_data);
            }
            
            free($1); free($2); free($4);
            } arr_fild
        
        | SMT_NAME SMT_NAME {
            bool is_error = false, error_flag = false;
            
            error_flag |= is_error =
              nullptr == type_exists($1);
            if(is_error)
              yyerror("undefined type");

            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");
              
            error_flag |= is_error =
              type_exists(cls_last_name) &&
              type_exists(cls_last_name)->get_data($2);
            if(is_error)
              yyerror("identifier already defined in class");
          
            // success
            if(false == error_flag)
            {
              object_data o_data($1);
              o_data_global = &o_data;
              type_exists(cls_last_name)->insert($2, &o_data);
            }
            } OPERATOR_ASSIGN '{' obj_vals ';' arr_fild {
            
            if(o_data_global)
            {
              objit_global = o_data_global->end();
              o_data_global = nullptr;
            }
            
            free($1); free($2);
          }
        
        /*! 2 access rules */
        | A_PRV arr_fild /* TODO: semantics but much later */
        | A_PUB arr_fild /* TODO: semantics but much later */
        | '}'

        /*! 6 error rules */
        | RSV_TYPE RSV_TYPE ';' {
            yyerror("type treated as an identifier");
            free($1); free($2);
          } arr_fild
        | RSV_TYPE RSV_TYPE OPERATOR_ASSIGN SMT_NAME ';' {
            yyerror("type treated as an identifier");
            free($1); free($2); free($4);
          } arr_fild
        | RSV_TYPE RSV_TYPE OPERATOR_ASSIGN cst_call ';' {
            yyerror("type treated as an identifier");
            free($1); free($2); free($4);
          } arr_fild
        | SMT_NAME RSV_TYPE ';' {
            if(nullptr == type_exists($1))
              yyerror("undefined type");
            yyerror("type treated as an identifier");
            free($1); free($2);
          } arr_fild
        | SMT_NAME RSV_TYPE OPERATOR_ASSIGN SMT_NAME ';' {
            if(nullptr == type_exists($1))
              yyerror("undefined type");
            yyerror("type treated as an identifier");
            free($1); free($2); free($4);
          } arr_fild
        | SMT_NAME RSV_TYPE OPERATOR_ASSIGN obj_vals ';' {
            if(nullptr == type_exists($1))
              yyerror("undefined type");
            yyerror("type treated as an identifier");
            free($1); free($2);
          } arr_fild
        ;
        
/*!------------------------------------------------
/*! variable states */

var_decl: RSV_TYPE SMT_NAME ';' {
            bool is_error = false, error_flag = false;
            
            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");
              
            error_flag |= is_error =
              size_t(-1) != scope_search($2);
            if(is_error)
              yyerror("identifier already defined");
            
            // success
            if(false == error_flag)
            {
          
              variable_data v_data($1);
    if((symbols.at(0).get_data(std::string("ft1"))))
                printf("regula 0: %s ft1 %s\n", $2 ,((variable_data *)(symbols.at(0).get_data(std::string("ft1"))))->get_value().c_str());
             
              symbols[LAST_SCOPE].insert($2, &v_data);
            
            if((symbols.at(0).get_data(std::string("ft1"))))
                printf("regula 0: ft1 %s\n",((variable_data *)(symbols.at(0).get_data(std::string("ft1"))))->get_value().c_str());


             
            }

            free($1); free($2); 
          }
        | var_defn
        ;

var_defn: RSV_TYPE SMT_NAME OPERATOR_ASSIGN SMT_NAME ';' {
            bool is_error = false, error_flag = false;
            
            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");
              
            error_flag |= is_error =
              size_t(-1) != scope_search($2);
            if(is_error)
              yyerror("identifier already defined");
            
            item_data* argument = nullptr;
            size_t scope = scope_search($4);
            if(size_t(-1) != scope)
              argument = symbols.at(scope).get_data($4);
              
            error_flag |= is_error = (nullptr == argument) ||
                (argument && std::string($2) == std::string($4));
            if(is_error)
              yyerror("undefined argument");

            // success
            if(false == error_flag)
            {
              variable_data v_data($1,
                ((variable_data *)(argument))->get_value());
              symbols[LAST_SCOPE].insert($2, &v_data);
            }
              
            free($1); free($2); free($4);
          }

        | RSV_TYPE SMT_NAME OPERATOR_ASSIGN cst_call ';' {
            bool is_error = false, error_flag = false;
            
            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");

            error_flag |= is_error =
              size_t(-1) != scope_search($2);
            if(is_error)
              yyerror("identifier already defined");

            // success
            if(false == error_flag)
            {
              variable_data v_data($1, $4);
              symbols[LAST_SCOPE].insert($2, &v_data);
            }
            
            free($1); free($2); /*free($4);*/
          };

/*!------------------------------------------------
/*! function states */

fct_decl: RSV_TYPE SMT_NAME '(' parametr arr_parm ';' {
            size_t scope = scope_search($2);
            if(size_t(-1) != scope)
            {
              item_data* i_data = symbols.at(scope).get_data($2);
              if(i_data && ITEM_TYPE_FCT !=
                i_data->get_item_type())
                yyerror("identifier already defined");
            }
            free($1); free($2);
          }
        | RSV_TYPE SMT_NAME '('')' ';' {
            size_t scope = scope_search($2);
            if(size_t(-1) != scope)
            {
              item_data* i_data = symbols.at(scope).get_data($2);
              if(i_data && ITEM_TYPE_FCT !=
                i_data->get_item_type())
                yyerror("identifier already defined");
            }
            free($1); free($2);
          }

        | SMT_NAME SMT_NAME '(' parametr arr_parm ';' {
            if(nullptr == type_exists($1))
              yyerror("undefined type");
            free($1); free($2);
          }
        | SMT_NAME SMT_NAME '('')' ';' {
            if(nullptr == type_exists($1))
              yyerror("undefined type");
            free($1); free($2);
          }

        | fct_defn
        ;

fct_defn: RSV_TYPE SMT_NAME {
            bool is_error = false, error_flag = false;
  
            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");
            
            error_flag |= is_error =
              size_t(-1) != scope_search($2);
            if(is_error)
              yyerror("identifier already defined");

            if(false == error_flag)
            {
              function_data f_data($1);
              symbols[LAST_SCOPE].insert($2, &f_data);
              f_data_global = (function_data*)
                symbols.at(LAST_SCOPE).get_data($2);
            }} '(' parametr arr_parm scope_begin statement_list {
            f_data_global = nullptr;
            free($1); free($2);
          }
        | SMT_NAME SMT_NAME {
            bool is_error = false, error_flag = false;

            error_flag |= is_error =
              nullptr == type_exists($1);
            if(is_error)
              yyerror("undefined type");
            
            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");
            
            error_flag |= is_error =
              size_t(-1) != scope_search($2);
            if(is_error)
              yyerror("identifier already defined");
            
            if(false == error_flag)
            {
              function_data f_data($1);
              f_data_global = &f_data;
              symbols[LAST_SCOPE].insert($2, &f_data);
            }} '(' parametr arr_parm scope_begin statement_list {
            f_data_global = nullptr;
            free($1); free($2);
          }
        ;

arr_parm: parametr arr_parm;
parametr: ',' RSV_TYPE SMT_NAME {
            if(nullptr == f_data_global)
              yyerror("function parameter can't be created");
            else
            {
              variable_data v_data($2);
              f_data_global->
                parameter_insert($3, &v_data);
            }
            
            free($2); free($3); 
          }
        | ',' SMT_NAME SMT_NAME {
            bool is_error = false, error_flag = false;

            error_flag |= is_error =
              nullptr == f_data_global;
            if(is_error)
              yyerror("function parameter can't be created");
            
            error_flag |= is_error =
              nullptr == type_exists($2);
            if(is_error)
              yyerror("undefined type");
            
            if(false == error_flag)
            {
              object_data o_data($2);
              f_data_global->
                parameter_insert($3, &o_data);
            }
            
            free($2); free($3);
          }

        | ',' RSV_TYPE {
            if(nullptr == f_data_global)
              yyerror("function parameter can't be created");
            else
            {
              variable_data v_data($2);
              f_data_global->
                parameter_insert(&v_data);
            }
            
            free($2);
          }
        | ',' SMT_NAME {
            bool is_error = false, error_flag = false;

            error_flag |= is_error =
              nullptr == f_data_global;
            if(is_error)
              yyerror("function parameter can't be created");
            
            error_flag |= is_error =
              nullptr == type_exists($2);
            if(is_error)
              yyerror("undefined type");
            
            if(false == error_flag)
            {
              object_data o_data($2);
              f_data_global->
                parameter_insert(&o_data);
            }
            
            free($2);
          }

        | ')'
        
        /*TODO: maybe with assignation too? => another 4 rules */
        ;

/*!------------------------------------------------
/*! object states */

obj_decl: SMT_NAME SMT_NAME ';' {
            bool is_error = false, error_flag = false;
            
            error_flag |= is_error =
              nullptr == type_exists($1);
            if(is_error)
              yyerror("undefined type");

            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");
            
            error_flag |= is_error =
              size_t(-1) != scope_search($2);
            if(is_error)
              yyerror("identifier already defined");
              
            // success
            if(false == error_flag)
            {
              object_data o_data($1);
              symbols[LAST_SCOPE].insert($2, &o_data);
            }

            free($1); free($2);
          }
        | obj_defn
        ;

obj_defn: SMT_NAME SMT_NAME OPERATOR_ASSIGN SMT_NAME ';' {
            bool is_error = false, error_flag = false;
            
            error_flag |= is_error =
              nullptr == type_exists($1);
            if(is_error)
              yyerror("undefined type");
            
            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");

            error_flag |= is_error =
              size_t(-1) != scope_search($2);
            if(is_error)
              yyerror("identifier already defined");
            
            item_data* argument = nullptr;
            size_t scope = scope_search($4);
            if(size_t(-1) != scope)
              argument = symbols.at(scope).get_data($4);

            error_flag |= is_error = (nullptr == argument) ||
                (argument && std::string($2) == std::string($4));
            if(is_error)
              yyerror("undefined argument");

            // success
            if(false == error_flag)
            {
              object_data o_data($1, *(object_data*)argument);
              symbols[LAST_SCOPE].insert($2, &o_data);
            }
              
            free($1); free($2); free($4);
          }
        | SMT_NAME SMT_NAME {

            if(nullptr == type_exists($1))
              yyerror("undefined type");
            else
            {
              object_data o_data($1);
              symbols[LAST_SCOPE].insert($2, &o_data);
              o_data_global = (object_data*)
                symbols.at(LAST_SCOPE).get_data($2);
              objit_global = o_data_global->begin();
            }} 
            OPERATOR_ASSIGN '{' obj_vals ';' {
            
            if(o_data_global)
            {
              objit_global = o_data_global->end();
              o_data_global = nullptr;
            }

            free($1); free($2);
          }
        ;

// all terminals of obj_vals can be variables or objects
obj_vals: SMT_NAME ',' {

            // field interrogation
            std::pair<std::string, item_data*> 
              att_pair = *objit_global;
            std::string att_name = att_pair.first;
              
            // get data from id
            size_t scope = scope_search($1);
            if(scope >= symbols.size())
              yyerror("identifier not found");
          
            // success
            else
            {
              item_data* i_data =
                symbols.at(scope).get_data($1);
              o_data_global->set_attribute(att_name, i_data);
            }

            objit_global++;
          }
        | SMT_NAME {
            
            // field interrogation
            std::pair<std::string, item_data*> 
              att_pair = *objit_global;
            std::string att_name = att_pair.first;
              
            // get data from id
            size_t scope = scope_search($1);
            if(scope >= symbols.size())
              yyerror("identifier not found");
          
            // success
            else
            {
              item_data* i_data =
                symbols.at(scope).get_data($1);
              o_data_global->set_attribute(att_name, i_data);
            }

            objit_global++;
          }
        | cst_call ',' {
            
            // field interrogation
            std::pair<std::string, item_data*> 
              att_pair = *objit_global;
            std::string att_name = att_pair.first;
            
            variable_data v_data(type_of($1), $1);
            o_data_global->set_attribute(att_name, &v_data);

            objit_global++;
            free($1);
          }
        | cst_call {

            // field interrogation
            std::pair<std::string, item_data*> 
              att_pair = *objit_global;
            std::string att_name = att_pair.first;
            
            variable_data v_data(type_of($1), $1);
            o_data_global->set_attribute(att_name, &v_data);

            objit_global++;
            free($1);
          }
        
        /* TODO: initialization of inside object objects? { cst_call, cst_call } */
        | '}'

/*!------------------------------------------------
/*! calling states */

/*
fld_call: SMT_NAME A_FLD SMT_NAME {
            bool is_error = false, error_flag = false;

            error_flag |= is_error = is_type($1) || is_type($3);
            if(is_error)
              yyerror("type treated as an identifier");
            
            item_data* argument = nullptr;
            size_t scope = scope_search($1);
            if(size_t(-1) != scope)
              argument = symbols.at(scope).get_data($1);
              
            error_flag |= is_error = (nullptr == argument);
            if(is_error)
              yyerror("identifier not found");

            if(argument)
            {
              std::string cls_name = argument->get_data_type();
              type_exists(cls_name)->get_data($3); 
            }

            free($1); free($3);
          };

itm_call: SMT_NAME {
            bool is_error = false, error_flag = false;

            error_flag |= is_error = is_type($1);
            if(is_error)
              yyerror("type treated as an identifier");
            
            item_data* argument = nullptr;
            size_t scope = scope_search($1);
            if(size_t(-1) != scope)
              argument = symbols.at(scope).get_data($1);
              
            error_flag |= is_error = (nullptr == argument);
            if(is_error)
              yyerror("identifier not found");

            free($1);
          };

fct_call: SMT_NAME '(' arr_argm ')' { free($1); } ;
        | SMT_NAME '(' ')' { free($1); } ;
argument: SMT_NAME | cst_call;
arr_argm: argument ',' arr_argm
        | argument
        ;
*/

/*! text constant states */

cst_call: LIT_INTG { $$ = ($1); }
        | LIT_FLOT { $$ = ($1); }
        | LIT_CHAR { $$ = ($1); }
        | LIT_STRG { $$ = ($1); }
        | LIT_BOOL { $$ = ($1); }
        ;

/*!------------------------------------------------
/*!------------------------------------------------
/*! statements */

global_declaration: cls_decl global_declaration
	                | fct_decl global_declaration
	                | var_decl global_declaration
                  | obj_decl global_declaration
                  | ';' global_declaration
                  | method_master
                  /*todo should allow expressions here too*/
	                ;

scope_begin : '{' { symbols.emplace_back(); };
scope_end   : '}' { symbols.pop_back(); };
method_master   : scope_begin statement_list;

local_declaration : var_decl local_declaration
                  | fct_decl local_declaration
                  | obj_decl local_declaration
                  | statement_list
                  ;

statement_list: local_declaration statement_list
              | scope_begin statement_list scope_end statement_list
              //| expression_parse statement_list
              | scope_end
              ;

/* statements types and parsing technique */
/*

expression: expression '+' term
          | expression '-' term
          | term
          ;
term: term '*' factor
    | term '/' factor
    | term '%' factor
    | factor
    ;
factor: '(' expression ')'
      | LIT_INTG
      | ID
expression_parse: expression_int
                | expression_flt
                | expression_chr
                | expression_str
                | expression_bol
                | fct_call
                ;

arr_argm        : ',' expression_parse arr_argm
                | ')'
                ;
fct_call        : SMT_NAME '(' expression_parse arr_argm
                | SMT_NAME '('')'
                ;

expression_int  : SMT_NAME OPR_INTG expression_int
                | SMT_NAME 
                | LIT_INTG OPR_INTG expression_int
                | LIT_INTG 
                //| method_print ';' { std::string s = $1 + 6; s[s.size() - 1] = '\0'; printf("%s", s.c_str()); }
                ;

expression_flt  : SMT_NAME OPR_FLOT expression_flt
                | SMT_NAME 
                | LIT_FLOT OPR_FLOT expression_flt
                | LIT_FLOT 
                ;
expression_chr  : SMT_NAME OPR_CHAR expression_chr
                | SMT_NAME 
                | LIT_CHAR OPR_CHAR expression_chr
                | LIT_CHAR 
                ;
expression_str  : SMT_NAME OPR_STRG expression_str
                | SMT_NAME 
                | LIT_STRG OPR_STRG expression_str
                | LIT_STRG 
                //| method_type
                ;
expression_bol  : SMT_NAME OPR_BOOL expression_bol
                | SMT_NAME 
                | LIT_BOOL OPR_BOOL expression_bol
                | LIT_BOOL 
                | U_OPR_BOOL SMT_NAME expression_bol
                | U_OPR_BOOL SMT_NAME 
                | U_OPR_BOOL LIT_BOOL expression_bol
                | U_OPR_BOOL LIT_BOOL 
                ;
*

/* assignation statement */// here is needed a recursive approach
/* 
statement_assg  : SMT_NAME OPERATOR_ASSIGN call_parse ';'
                | SMT_NAME OPERATOR_ASSIGN method_type ';'
                | SMT_NAME OPERATOR_ASSIGN method_print ';'
                ;
*/

/* bool returning statements */
/*
statement_bool  : SMT_NAME OPERATOR_RELTIN SMT_NAME ;
*/

/* conditional statements */
/*
condition_append: ';'
                | statement_parse
                | scope_begin statement_list scope_end
                | scope_begin scope_end
                ;
*/

// statement_if    : R_SEQ_IF '(' statement_bool ')' condition_append;
// statement_for   : R_SEQ_FOR '(' /* declare */ ';' statement_bool ';' /* statement */ ')' condition_append;
// statement_whl   : R_SEQ_WHL '(' statement_bool ')' condition_append;
// statement_cond  : statement_if ;//| statement_for | statement_whl;

%%

/*!------------------------------------------------
/*!------------------------------------------------
/*! C++ functions */

// does not stop the compilation
void yyerror(const char * s){
  count_error++;
  printf("error - line %d: %s.\n", yylineno, s);
}

int main(int argc, char** argv)
{
  if(argc != 2)
  {
    yyerror("wrong number of arguments");
    return EXIT_FAILURE;
  }

  FILE* ptr = fopen(argv[1], "r");
  if(nullptr == ptr)
  {
    yyerror("invalid file");
    return EXIT_FAILURE;
  }

  yyin = ptr;
  yyparse();
  return EXIT_SUCCESS;
}
