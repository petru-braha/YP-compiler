
%{
#include <iostream>
#include <vector>
#include "src/type_table.hpp"

#include "src/symbol_table.hpp"

extern FILE* yyin;
extern char* yytext;
extern int yylineno;

symbol_table table;
type_table t_table;
int error_count;
int static static_count_fields;
int i = 0;
std::string nume_clasa;
std::string fields[99999999];

extern int yylex();
void yyerror(const char * s);
%}

//------------------------------------------------

%union {
    char* token_name;
}

%token<token_name> MASTER
%token OPERATOR_ASSIGN OPERATOR_RELTIN
%token<token_name> S_NME R_TYP R_CLS R_SEQ
%token<token_name> C_INT C_FLT C_CHR C_STR C_BOL
%start starting_symbol

%%

starting_symbol : declaration;

// declarations
decl_var    : R_TYP S_NME ';'{table.add ($2, $1, nullptr);}
            | R_TYP S_NME OPERATOR_ASSIGN S_NME ';' // (1)
            ;

parm_arr    : R_TYP S_NME ',' parm_arr
            | R_TYP S_NME
            ;
decl_fct    : R_TYP S_NME '(' parm_arr ')' ';' {table.add ($2, $1, nullptr);}
            | R_TYP S_NME '('')'';'
            | defn_fct
            ;             

fild_arr    : decl_fct fild_arr {fields[i] = $1;i++;}
            | decl_var fild_arr {fields[i] = $1;i++;}
            | '}'{t_table.add (nume_clasa, fields, i); i = 0;}
            ;
decl_cls    : R_CLS S_NME '{' {nume_clasa = $2;} fild_arr
            | R_CLS S_NME ';' {nume_clasa = $2;}
            ;

declaration : decl_cls declaration
	        | decl_fct declaration
	        | decl_var declaration
            | master
	        ;
decl_obj    : S_NME S_NME {table.add ($2, $1, nullptr);}
            | S_NME S_NME OPERATOR_ASSIGN S_NME {table.add ($2, $1, nullptr);}
            | S_NME S_NME OPERATOR_ASSIGN '{''}' {table.add ($2, $1, nullptr);}
            ;

// statements
scope_begin : '{';
scope_end   : '}';

defn_fct    : R_TYP S_NME '(' parm_arr ')' scope_begin statement_list
            | R_TYP S_NME '('')' scope_begin statement_list

master  : MASTER scope_begin statement_list;
        
statement_list  : statement_easy statement_list
                | statement_cond statement_list
                | scope_end
                ;

statement_easy  : C_INT ';'
                | C_FLT ';'
                | C_CHR ';'
                | C_STR ';'
                | C_BOL ';'
                | decl_var
                | S_NME OPERATOR_ASSIGN S_NME ';' // (1)
                | S_NME OPERATOR_RELTIN S_NME ';' // (1)
                ;

statement_bool  : S_NME OPERATOR_RELTIN S_NME // (1)
                | S_NME OPERATOR_ASSIGN S_NME // (1)
                ;

statement_cond  : R_SEQ '(' statement_bool ')' ';'
                | R_SEQ '(' statement_bool ')' statement_easy
                | R_SEQ '(' statement_bool ')' scope_begin statement_easy scope_end
                | R_SEQ '(' statement_bool ')' scope_begin scope_end
                ;

%%

//------------------------------------------------
// C++ functions:

void yyerror(const char * s){
    std::cout << "error: " << s << " at line: " << yylineno << '\n';
}

int main(int argc, char** argv)
{
    if(argc != 2)
    {
        printf("error: wrong number of arguments.\n");
        return EXIT_FAILURE;
    }

    yyin = fopen(argv[1],"r");
    yyparse();
   
    return 0;
}