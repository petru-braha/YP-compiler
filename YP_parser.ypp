/* comments:
 * YP_parser.ypp - bottom-up parser, LARL(1) grammar
 * (c) authors - Braha Petru Bogdan - <petrubraha@gmail.com>
 *             - Meraru Ioan Lucian - <https://github.com/Zamdacmalfal>
 * run command example: ./YP exs/success/declaration/class/declaration.txt
 * run command example: ./YP exs/fail/declaration/class/field\ 0.txt
 
 *!* compilation should never throw exceptions *!*
 *!* all data is encoded as string *!*
 
 * rules' summary
  * declarations
  ** class(type)
  ** variable
  ** function
  ** object
  * statements
  ** expression
  ** fct_call
  ** control
  ** assignment
 * order of function rules
  ** yes parameters - no  array
  ** yes parameters - yes array
  ** no  parameters - no  array
  ** no  parameters - yes array
 */

%{
  #include <stdio.h>
  #include <cstring>
  #include <cmath>
  #include <string>
  #include <vector>
  #include "YP_utility.hpp"

  extern int yylex();
  void yyerror(const char * s);

  extern FILE* yyin;
  extern char* yytext;
  extern int yylineno;
  size_t count_error;
  std::vector<symbol_table> symbols;
  #define LAST_SCOPE symbols.size() - 1

  char* cls_last_name = nullptr;
  function_data* f_data_global = nullptr;
%}

%left '&' '|'
%left "==" "!=" "<=" "<" ">=" ">"
%left '+' '-'
%left '*' '/' '%'
%left '(' ')'

%right '='
%right '^'

%union {
  char* information;
  unsigned char character;
    
  bool bool_number;
  long long intg_number;
  double real_number;
}

%token SCOPE_BEGIN SCOPE_END
%token MASTER TYPEOF PRINTF

%token RSV_CLSS ACS_PRIV ACS_PUBL ACS_FILD

%token<information> SMT_NAME RSV_TYPE RSV_ARRY DEF_ARRY
%token<intg_number> LIT_INTG
%token<real_number> LIT_FLOT
%token<information> LIT_CHAR LIT_STRG
%token<bool_number> LIT_BOOL
%type<information> LIT_CALL

%token OPR_ASSIGN
%token<character> OPRU OPR0 OPR1 OPR2
%token<information> OPR_RELTON

%type<information> expression
%type<information> term
%type<information> fact
%type<information> powr

%token ACT_BREK ACT_CONT ACT_RTRN
%token SEQ_IFIF SEQ_ELSE SEQ_WHLE SEQ_FOOR

%start starting_symbol

%%
/*!------------------------------------------------
/*!------------------------------------------------
/*! declarations */

starting_symbol : { /** initialize the compiler */
                    function_data f_data0("int"),
                      f_data1("string");
                    
                    symbol_table s;
                    s.insert("print", &f_data0);
                    s.insert("type", &f_data1);
                    
                    // symbols.emplace_back();
                    // symbols[0] = s;
                  }
                  global_declaration
                  { /** check for errors at the end */
                    if(0 == count_error)
                      printf("the program was compiled correctly.\n");
                    else
                      printf("the program has %zu errors.\n", count_error);
                  };

global_declaration: MASTER
                    SCOPE_BEGIN
                    statement_list
                  | cls_decl global_declaration
                  | cls_defn global_declaration
                  | var_decl global_declaration
                  | var_defn global_declaration
                  | fct_decl global_declaration
                  | fct_defn global_declaration
                  | obj_decl global_declaration
                  | obj_defn global_declaration
                  ;

cls_decl: RSV_CLSS SMT_NAME ';'{
            /*if(size_t(-1) != scope_search($2))
              yyerror("identifier already defined");*/
            free($2);
          }
        ;

cls_defn: RSV_CLSS SMT_NAME SCOPE_BEGIN {
            if(size_t(-1) != scope_search($2))
              yyerror("identifier already defined");
            else
            {
              cls_last_name = strdup($2);
              type_insert($2, symbol_table($2));
            }

            free($2);
          }
          cls_fild arr_fild { 
            free(cls_last_name);
            cls_last_name = nullptr; 
          }
        | RSV_CLSS SMT_NAME SCOPE_BEGIN SCOPE_END {
            if(size_t(-1) != scope_search($2))
              yyerror("identifier already defined");
            else
              type_insert($2, symbol_table($2));
            
            free($2);
          }
        ;

arr_fild: cls_fild arr_fild
        | SCOPE_END
        ;

/* 20 rules for field
 * 4 rules for variable
 * 8 rules for function
 * 2 rules for constructor
 * 4 rules for object
 * 2 rules for access specifier
 */

cls_fild: /** 4v rules */ 
/*1*/     RSV_TYPE SMT_NAME ';' {
            bool is_error = false, error_flag = false;

            if(error_flag |= is_error = type_exists($2);
              is_error)
              yyerror("type treated as an identifier");

            if(error_flag |= is_error =
              type_exists(cls_last_name)->get_data($2);
              is_error)
              yyerror("identifier already defined in class");
            
            // success
            if(false == error_flag)
            {
              variable_data v_data($1);
              type_exists(cls_last_name)->insert($2, &v_data);
            }

            free($1);
            free($2);
        }
/*2*/   | RSV_ARRY SMT_NAME ';' {
            bool is_error = false, error_flag = false;

            if(error_flag |= is_error = type_exists($2);
              is_error)
              yyerror("type treated as an identifier");

            if(error_flag |= is_error =
              type_exists(cls_last_name)->get_data($2);
              is_error)
              yyerror("identifier already defined in class");
            
            // success
            if(false == error_flag)
            {
              // check if there exists a null size
              /*todo array of */
              //variable_data v_data($1);
              //type_exists(cls_last_name)->insert($2, &v_data);
            }

            free($1);
            free($2);
        }
/*3*/   | RSV_TYPE SMT_NAME OPR_ASSIGN expression ';' {
            bool is_error = false, error_flag = false;

            if(error_flag |= is_error = type_exists($2);
              is_error)
              yyerror("type treated as an identifier");

            if(error_flag |= is_error =
              type_exists(cls_last_name)->get_data($2);
              is_error)
              yyerror("identifier already defined in class");

            if(error_flag |= is_error =
              nullptr == $4 || type_of($4) != std::string($1);
              is_error)
              yyerror("incompatible types");
            
            // success
            if(false == error_flag)
            {
              variable_data v_data($1, $4);
              type_exists(cls_last_name)->insert($2, &v_data);
            }

            free($1);
            free($2);
            free($4);
        }
/*4*/   | RSV_ARRY SMT_NAME OPR_ASSIGN expression ';' {
            bool is_error = false, error_flag = false;

            if(error_flag |= is_error = type_exists($2);
              is_error)
              yyerror("type treated as an identifier");

            if(error_flag |= is_error =
              type_exists(cls_last_name)->get_data($2);
              is_error)
              yyerror("identifier already defined in class");

            if(error_flag |= is_error =
              nullptr == $4 || type_of($4) != std::string($1);
              is_error)
              yyerror("incompatible types");
            
            // success
            if(false == error_flag)
            {
              //variable_data v_data($1, $4);
              /*todo vector*/
              //type_exists(cls_last_name)->insert($2, &v_data);
            }

            free($1);
            free($2);
            free($4);
        }
        
          /** 8f rules */
/*1*/   | RSV_TYPE SMT_NAME /*{
            bool is_error = false, error_flag = false;

            if(error_flag |= is_error = type_exists($2);
              is_error)
              yyerror("type treated as an identifier");

            if(error_flag |= is_error =
              type_exists(cls_last_name)->get_data($2);
              is_error)
              yyerror("identifier already defined in class");

            // success
            if(false == error_flag)
            {
              function_data f_data($1);
              type_exists(cls_last_name)->insert($2, &f_data);
              f_data_global = (function_data*)
                type_exists(cls_last_name)->get_data($2);
            }

            free($1);
            free($2);
          } */

          '(' parametr arr_parm /*{ f_data_global = nullptr; }*/
          SCOPE_BEGIN
          statement_list ';' { /*todo ast*/ }
        
/*2*/   | RSV_ARRY SMT_NAME /*{
            bool is_error = false, error_flag = false;

            if(error_flag |= is_error = type_exists($2);
              is_error)
              yyerror("type treated as an identifier");

            if(error_flag |= is_error =
              type_exists(cls_last_name)->get_data($2);
              is_error)
              yyerror("identifier already defined in class");

            // success
            if(false == error_flag)
            {
              /*todo array
              //function_data f_data($1);
              //type_exists(cls_last_name)->insert($2, &f_data);
              //f_data_global = (function_data*)
                //type_exists(cls_last_name)->get_data($2);
            }

            free($1);
            free($2);
          }*/
          
          '(' parametr arr_parm /* { f_data_global = nullptr; } */
          SCOPE_BEGIN
          statement_list ';' { /*todo ast*/ }
/*3*/   | RSV_TYPE SMT_NAME /*{
            bool is_error = false, error_flag = false;

            if(error_flag |= is_error = type_exists($2);
              is_error)
              yyerror("type treated as an identifier");

            if(error_flag |= is_error =
              type_exists(cls_last_name)->get_data($2);
              is_error)
              yyerror("identifier already defined in class");

            // success
            if(false == error_flag)
            {
              function_data f_data($1);
              type_exists(cls_last_name)->insert($2, &f_data);
            }

            free($1);
            free($2);
          }*/
          
          '('')'
          SCOPE_BEGIN
          statement_list ';' { /*todo ast*/ }

/*4*/   | RSV_ARRY SMT_NAME /*{
            bool is_error = false, error_flag = false;

            if(error_flag |= is_error = type_exists($2);
              is_error)
              yyerror("type treated as an identifier");

            if(error_flag |= is_error =
              type_exists(cls_last_name)->get_data($2);
              is_error)
              yyerror("identifier already defined in class");

            // success
            if(false == error_flag)
            {
              /*todo array
              //function_data f_data($1);
              //type_exists(cls_last_name)->insert($2, &f_data);
            }

            free($1);
            free($2);
          }*/

          '('')'
          SCOPE_BEGIN
          statement_list ';' { /*todo ast*/ }
          
/*5*/   | SMT_NAME SMT_NAME /*{
            bool is_error = false, error_flag = false;

            error_flag |= is_error = 
              nullptr == type_exists($1);
            if(is_error)
              yyerror("undefined type");
            
            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");
            
            error_flag |= is_error =
              type_exists(cls_last_name)->get_data($2);
            if(is_error)
              yyerror("identifier already defined in class");

            // success
            if(false == error_flag)
            {
              function_data f_data($1);
              type_exists(cls_last_name)->insert($2, &f_data);
              f_data_global = (function_data*)
                type_exists(cls_last_name)->get_data($2);
            }

            free($1);
            free($2);
          }*/
          
          '(' parametr arr_parm /*{ f_data_global = nullptr; }*/
          SCOPE_BEGIN
          statement_list ';' { /*todo ast*/ }

/*6*/   | DEF_ARRY SMT_NAME /*{
            bool is_error = false, error_flag = false;

            error_flag |= is_error = 
              nullptr == type_exists($1);
            if(is_error)
              yyerror("undefined type");
            
            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");
            
            error_flag |= is_error =
              type_exists(cls_last_name)->get_data($2);
            if(is_error)
              yyerror("identifier already defined in class");

            // success
            if(false == error_flag)
            {
              function_data f_data($1);
              type_exists(cls_last_name)->insert($2, &f_data);
              f_data_global = (function_data*)
                type_exists(cls_last_name)->get_data($2);
            }

            free($1);
            free($2);
          }*/
          
          '(' parametr arr_parm /*{ f_data_global = nullptr; }*/
          SCOPE_BEGIN
          statement_list ';' { /*todo ast*/ }

/*7*/   | SMT_NAME SMT_NAME /*{
            bool is_error = false, error_flag = false;

            error_flag |= is_error = 
              nullptr == type_exists($1);
            if(is_error)
              yyerror("undefined type");
            
            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");
            
            error_flag |= is_error =
              type_exists(cls_last_name)->get_data($2);
            if(is_error)
              yyerror("identifier already defined in class");

            // success
            if(false == error_flag)
            {
              function_data f_data($1);
              type_exists(cls_last_name)->insert($2, &f_data);
              f_data_global = (function_data*)
                type_exists(cls_last_name)->get_data($2);
          }*/
          
          '(' ')'
          SCOPE_BEGIN
          statement_list ';' { /*todo ast*/ }

/*8*/   | DEF_ARRY SMT_NAME /*{
            bool is_error = false, error_flag = false;

            error_flag |= is_error = 
              nullptr == type_exists($1);
            if(is_error)
              yyerror("undefined type");
            
            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");
            
            error_flag |= is_error =
              type_exists(cls_last_name)->get_data($2);
            if(is_error)
              yyerror("identifier already defined in class");

            // success
            if(false == error_flag)
            {
              function_data f_data($1);
              type_exists(cls_last_name)->insert($2, &f_data);
              f_data_global = (function_data*)
                type_exists(cls_last_name)->get_data($2);
          }*/
          
          '(' ')'
          SCOPE_BEGIN
          statement_list ';' { /*todo ast*/ }

          /** 2c rules */
/*1*/   | SMT_NAME /*{
            if(std::string($1) != std::string(cls_last_name))
              yyerror("constructor should be labeled as class");
            else
            {
              function_data f_data($1);
              type_exists(cls_last_name)->insert($1, &f_data);
              f_data_global = ...
            }
          }*/

          '(' parametr arr_parm /* { f_data_global = nullptr; } */
          SCOPE_BEGIN
          statement_list ';' {
            // symbols.emplace_back();
            /*todo ast*/
          }
/*2*/   | SMT_NAME '(' ')'
          SCOPE_BEGIN
          statement_list ';' {
            if(std::string($1) != std::string(cls_last_name))
              yyerror("constructor should be labeled as class");
            else
            {
              function_data f_data($1);
              type_exists(cls_last_name)->insert($1, &f_data);
            }

            // symbols.emplace_back();
            /*todo ast*/
          }
        
          /** 4o rules */
/*1*/   | SMT_NAME SMT_NAME ';' {
            bool is_error = false, error_flag = false;
        
            error_flag |= is_error =
              nullptr == type_exists($1);
            if(is_error)
              yyerror("undefined type");
            
            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");
              
            error_flag |= is_error =
              type_exists(cls_last_name) &&
              type_exists(cls_last_name)->get_data($2);
            if(is_error)
              yyerror("identifier already defined in class");
            
            // success
            if(false == error_flag)
            {
              object_data o_data($1);
              type_exists(cls_last_name)->insert($2, &o_data);
            }

            free($1); free($2); 
          }

/*2*/   | DEF_ARRY SMT_NAME ';' {
            bool is_error = false, error_flag = false;

            char * ptr = strchr($1, '[');
            if(ptr)
              *ptr = '\0';
            error_flag |= is_error =
              nullptr == type_exists($1);
            if(is_error)
              yyerror("undefined type");
            
            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");
              
            error_flag |= is_error =
              type_exists(cls_last_name) &&
              type_exists(cls_last_name)->get_data($2);
            if(is_error)
              yyerror("identifier already defined in class");
            
            // success
            if(false == error_flag)
            {
              object_data o_data($1);
              type_exists(cls_last_name)->insert($2, &o_data);
            }

            free($1); free($2); 
          }

/*3*/   | SMT_NAME SMT_NAME OPR_ASSIGN '{' attribte obj_vals /* type compat check */
/*4*/   | DEF_ARRY SMT_NAME OPR_ASSIGN '{' attribte obj_vals /* type compat check */
        
          /** 2a rules */
        | ACS_PRIV {}
        | ACS_PUBL {}
        ;

/* 4v rules */
var_decl: RSV_TYPE SMT_NAME ';' {
            bool is_error = false, error_flag = false;
            
            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");
              
            error_flag |= is_error =
              size_t(-1) != scope_search($2);
            if(is_error)
              yyerror("identifier already defined");
            
            // success
            if(false == error_flag)
            {
              variable_data v_data($1);
              symbols[LAST_SCOPE].insert($2, &v_data);
            }

            free($1); free($2); 
          }
        | RSV_ARRY SMT_NAME ';' {
            bool is_error = false, error_flag = false;
            
            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");
              
            error_flag |= is_error =
              size_t(-1) != scope_search($2);
            if(is_error)
              yyerror("identifier already defined");
            
            // success
            if(false == error_flag)
            {
              variable_data v_data($1);
              symbols[LAST_SCOPE].insert($2, &v_data);
            }

            free($1); free($2); 
          }
        ;
var_defn: RSV_TYPE SMT_NAME OPR_ASSIGN expression ';' {
            bool is_error = false, error_flag = false;
            
            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");
              
            error_flag |= is_error =
              size_t(-1) != scope_search($2);
            if(is_error)
              yyerror("identifier already defined");

            error_flag |= is_error = (nullptr == $4) ||
                ($4 && std::string($1) == type_of($4));
            if(is_error)
              yyerror("incompatible types");
           
            // success
            if(false == error_flag)
            {
              variable_data v_data($1);
              symbols[LAST_SCOPE].insert($2, &v_data);
            }

            free($1); free($2); 
          }
        | RSV_ARRY SMT_NAME OPR_ASSIGN expression ';' {
            bool is_error = false, error_flag = false;
            
            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");
              
            error_flag |= is_error =
              size_t(-1) != scope_search($2);
            if(is_error)
              yyerror("identifier already defined");

            error_flag |= is_error = (nullptr == $4) ||
                ($4 && std::string($1) == type_of($4));
            if(is_error)
              yyerror("incompatible types");
            
            // success
            if(false == error_flag)
            {
              variable_data v_data($1);
              symbols[LAST_SCOPE].insert($2, &v_data);
            }

            free($1); free($2); 
          }
        ;

/* 8f rules */
fct_decl: RSV_TYPE SMT_NAME '(' parametr arr_parm ';'
        | RSV_ARRY SMT_NAME '(' parametr arr_parm ';'
        | RSV_TYPE SMT_NAME '(' ')' ';'
        | RSV_ARRY SMT_NAME '(' ')' ';'
        | SMT_NAME SMT_NAME '(' parametr arr_parm ';'
        | DEF_ARRY SMT_NAME '(' parametr arr_parm ';'
        | SMT_NAME SMT_NAME '(' ')' ';'
        | DEF_ARRY SMT_NAME '(' ')' ';'
        ;
/* 8f rules */
fct_defn: RSV_TYPE SMT_NAME '(' parametr arr_parm 
          SCOPE_BEGIN
          statement_list ';'
        | RSV_ARRY SMT_NAME '(' parametr arr_parm 
          SCOPE_BEGIN
          statement_list ';'
        | RSV_TYPE SMT_NAME '(' ')'
          SCOPE_BEGIN
          statement_list ';'
        | RSV_ARRY SMT_NAME '(' ')'
          SCOPE_BEGIN
          statement_list ';'
        | SMT_NAME SMT_NAME '(' parametr arr_parm
          SCOPE_BEGIN
          statement_list ';'
        | DEF_ARRY SMT_NAME '(' parametr arr_parm
          SCOPE_BEGIN
          statement_list ';'
        | SMT_NAME SMT_NAME '(' ')'
          SCOPE_BEGIN
        | DEF_ARRY SMT_NAME '(' ')'
          SCOPE_BEGIN
        ;
arr_parm: ',' parametr arr_parm
        | ')'
        ;
parametr: RSV_TYPE SMT_NAME
        | RSV_ARRY SMT_NAME
        | SMT_NAME SMT_NAME
        | DEF_ARRY SMT_NAME
        ;

/* 4o rules */
obj_decl: SMT_NAME SMT_NAME ';' {
            bool is_error = false, error_flag = false;
            
            error_flag |= is_error =
              nullptr == type_exists($1);
            if(is_error)
              yyerror("undefined type");

            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");
            
            error_flag |= is_error =
              size_t(-1) != scope_search($2);
            if(is_error)
              yyerror("identifier already defined");
              
            // success
            if(false == error_flag)
            {
              object_data o_data($1);
              symbols[LAST_SCOPE].insert($2, &o_data);
            }

            free($1); free($2);
          }
        | DEF_ARRY SMT_NAME ';' {
            bool is_error = false, error_flag = false;
            
            error_flag |= is_error =
              nullptr == type_exists($1);
            if(is_error)
              yyerror("undefined type");

            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");
            
            error_flag |= is_error =
              size_t(-1) != scope_search($2);
            if(is_error)
              yyerror("identifier already defined");
              
            // success
            if(false == error_flag)
            {
              object_data o_data($1);
              symbols[LAST_SCOPE].insert($2, &o_data);
            }

            free($1); free($2);
          }
        ;
obj_defn: SMT_NAME SMT_NAME OPR_ASSIGN '{' attribte obj_vals /*{
            bool is_error = false, error_flag = false;
            
            error_flag |= is_error =
              nullptr == type_exists($1);
            if(is_error)
              yyerror("undefined type");
            
            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");

            error_flag |= is_error =
              size_t(-1) != scope_search($2);
            if(is_error)
              yyerror("identifier already defined");
            
            item_data* argument = nullptr;
            size_t scope = scope_search($4);
            if(size_t(-1) != scope)
              argument = symbols.at(scope).get_data($4);

            error_flag |= is_error = (nullptr == argument) ||
                (argument && std::string($2) == std::string($4));
            if(is_error)
              yyerror("undefined argument");

            // success
            if(false == error_flag)
            {
              object_data o_data($1, *(object_data*)argument);
              symbols[LAST_SCOPE].insert($2, &o_data);
            }
              
            free($1); free($2); free($4);
          }*/
        | DEF_ARRY SMT_NAME OPR_ASSIGN '{' attribte obj_vals /*{
            bool is_error = false, error_flag = false;
            
            error_flag |= is_error =
              nullptr == type_exists($1);
            if(is_error)
              yyerror("undefined type");
            
            error_flag |= is_error = is_type($2);
            if(is_error)
              yyerror("type treated as an identifier");

            error_flag |= is_error =
              size_t(-1) != scope_search($2);
            if(is_error)
              yyerror("identifier already defined");
            
            item_data* argument = nullptr;
            size_t scope = scope_search($4);
            if(size_t(-1) != scope)
              argument = symbols.at(scope).get_data($4);

            error_flag |= is_error = (nullptr == argument) ||
                (argument && std::string($2) == std::string($4));
            if(is_error)
              yyerror("undefined argument");

            // success
            if(false == error_flag)
            {
              object_data o_data($1, *(object_data*)argument);
              symbols[LAST_SCOPE].insert($2, &o_data);
            }
              
            free($1); free($2); free($4);
          }*/
        ;
obj_vals: ',' attribte obj_vals
        | '}'
        ;
attribte: expression
        ;

/*!------------------------------------------------
/*!------------------------------------------------
/*! statements */

statement_list: SCOPE_END
              | local_declaration statement_list
              | expression ';' statement_list
              | assignment ';' statement_list
              | ACT_BREK ';' statement_list
              | ACT_CONT ';' statement_list
              | ACT_RTRN ';' statement_list
              | control statement_list
              ;

local_declaration : var_decl
                  | var_defn
                  | fct_decl
                  | fct_defn
                  | obj_decl
                  | obj_defn
                  ;

expression: term OPR0 expression {
              std::string type_first(type_of($1));
              std::string type_secnd(type_of($3));
              if(type_first != type_secnd)
                yyerror("bad");

              std::string s;
              if('+' == $2 || '-' == $2)
              {
                if(std::string("bool") == type_first)
                  yyerror("bad");

                if(std::string("int") == type_first)
                {
                  long long var0 = atoll($1);
                  long long var1 = atoll($3);
                  long long result = '+' == $2 ? var0 + var1 : var0 - var1;
                  s = std::to_string(result);
                }
                else if(std::string("float") == type_first)
                {
                  double var0 = atof($1);
                  double var1 = atof($3);
                  double result = '+' == $2 ? var0 + var1 : var0 - var1;
                  s = std::to_string(result);
                }
                else if(std::string("char") == type_first)
                {
                  long long result = '+' == $2 ? $1[1] + $3[1] : $1[1] - $3[1];
                  s = std::to_string(result);
                }
                else if(std::string("string") == type_first)
                {
                  if('+' == $2)
                  {
                    s = std::string($1);
                    s += $3;
                  }
                  else
                  {
                    size_t position = 0;
                    s = std::string($1);
                    std::string token($3);
                    while(std::string::npos != 
                      (position = s.find(token, position)))
                      s.erase(position, token.length());
                  }
                }                
              }
              else
              {
                if(std::string("bool") != type_first)
                  yyerror("bad");

                if('&' == $2)
                {
                  if(std::string("false") == std::string($1) ||
                  std::string("false") == std::string($3))
                    s = std::string("false");
                  else
                    s = std::string("true");
                }
                else
                {
                  if(std::string("true") == std::string($1) ||
                  std::string("true") == std::string($3))
                    s = std::string("true");
                  else
                    s = std::string("false");
                }
              }
              $$ = strdup(s.c_str());
          }
          | term OPR_RELTON expression {
              std::string type_first(type_of($1));
              std::string type_secnd(type_of($3));
              if(type_first != type_secnd)
                yyerror("bad");
              
              std::string value0($1), value1($3);
              if(0 == strcmp($2, "=="))
                $$ = value0 == value1 ? strdup("true") : strdup("false");
              else if(0 == strcmp($2, "!="))
                $$ = value0 == value1 ? strdup("false") : strdup("true");
              else if(0 == strcmp($2, "<="))
                $$ = value0 <= value1 ? strdup("true") : strdup("false");
              else if(0 == strcmp($2, "<"))
                $$ = value0 < value1 ? strdup("true") : strdup("false");
              else if(0 == strcmp($2, ">="))
                $$ = value0 >= value1 ? strdup("true") : strdup("false");
              else if(0 == strcmp($2, ">"))
                $$ = value0 > value1 ? strdup("true") : strdup("false");
              
              free($1);
              free($3);
            }
          | term { $$ = strdup($1); free($1); }
          ;
term: term OPR1 fact {
        std::string type_first(type_of($1));
        std::string type_secnd(type_of($3));
        if(type_first != type_secnd)
          yyerror("bad");
        
        if('*' == $2 || '/' == $2)
        {
          if(std::string("string") == type_first ||
            std::string("bool") == type_first)
            yyerror("bad");
          
          if(std::string("int") == type_first)
          {
            long long var0 = atoll($1);
            long long var1 = atoll($3);
            long long result = '*' == $2 ? var0 * var1 : var0 / var1;
            std::string s = std::to_string(result);
            $$ = strdup(s.c_str());
          }
          else if(std::string("float") == type_first)
          {
            double var0 = atof($1);
            double var1 = atof($3);
            double result = '*' == $2 ? var0 * var1 : var0 / var1;
            std::string s = std::to_string(result);
            $$ = strdup(s.c_str());
          }
          else if(std::string("char") == type_first)
          {
            long long result = '*' == $2 ? $1[1] * $3[1] : $1[1] / $3[1];
            std::string s = std::to_string(result);
            $$ = strdup(s.c_str()); 
          }
        }
        else if('%' == $2)
        {
          if(std::string("string") == type_first ||
            std::string("bool") == type_first ||
            std::string("float") == type_first)
            yyerror("bad");
          
          if(std::string("int") == type_first)
          {
            long long var0 = atoll($1);
            long long var1 = atoll($3);
            long long result = var0 % var1;
            std::string s = std::to_string(result);
            $$ = strdup(s.c_str());
          }
          else if(std::string("char") == type_first)
          {
            long long result = $1[1] % $3[1];
            std::string s = std::to_string(result);
            $$ = strdup(s.c_str());
          }
        }

        free($1);
        free($3);
      }
    | fact { $$ = strdup($1); free($1); }
    ;
fact: fact OPR2 powr {
        std::string type_first(type_of($1));
        if(std::string("string") == type_first ||
          std::string("bool") == type_first ||
          std::string("char") == type_first)
          yyerror("bad");

        std::string type_secnd(type_of($3));
        if(type_first != type_secnd)
          yyerror("bad");
        
        if(std::string("int") == type_first)
        {
          long long var0 = atoll($1);
          long long var1 = atoll($3);
          long long result = std::pow(var0, var1);
          std::string s = std::to_string(result);
          $$ = strdup(s.c_str());
        }
        else if(std::string("float") == type_first)
        {
          double var0 = atof($1);
          double var1 = atof($3);
          double result = std::pow(var0, var1);
          std::string s = std::to_string(result);
          $$ = strdup(s.c_str());
        }
          
        free($1);
        free($3);
      }
    | powr { $$ = strdup($1); free($1); }
    ;
powr: '(' expression ')' { $$ = strdup($2); free($2); }
    | LIT_CALL { $$ = strdup($1); free($1); }
    | OPRU '(' expression ')' {
        std::string type(type_of($3));

        std::string s;
        if('-' == $1)
        {
          if(std::string("bool") == type ||
            std::string("string") == type)
            yyerror("bad");
            
          if(std::string("int") == type)
          {
            long long result = 0 - atoll($3);
            s = std::to_string(result);
          }
          else if(std::string("float") == type)
          {
            double result = 0.0 - atof($3);
            s = std::to_string(result);
          }
          else if(std::string("char") == type)
          {
            long long result = 0 - $3[1];
            s = std::to_string(result);
          }
        }
        else
        {
          if(std::string("bool") != type)
            yyerror("bad");
          std::string("true") == std::string($3) ? s = "false" : s = "true";
        }

        $$ = strdup(s.c_str());
        free($3);
      }
    | OPRU LIT_CALL {
        std::string type(type_of($2));

        std::string s;
        if('-' == $1)
        {
          if(std::string("bool") == type ||
            std::string("string") == type)
            yyerror("bad");
            
          if(std::string("int") == type)
          {
            long long result = 0 - atoll($2);
            s = std::to_string(result);
          }
          else if(std::string("float") == type)
          {
            double result = 0.0 - atof($2);
            s = std::to_string(result);
          }
          else if(std::string("char") == type)
          {
            long long result = 0 - $2[1];
            s = std::to_string(result);
          }
        }
        else
        {
          if(std::string("bool") != type)
            yyerror("bad");
          std::string("true") == std::string($2) ? s = "false" : s = "true";
        }

        $$ = strdup(s.c_str());
        free($2);
      }
    /*todo */
    | SMT_NAME { $$ = 0; }
    | SMT_NAME ACS_FILD SMT_NAME { $$ = 0; }
    | SMT_NAME '[' LIT_INTG ']' { $$ = 0; }
    | SMT_NAME '[' SMT_NAME ']' { $$ = 0; }
    | PRINTF '(' expression ')' { $$ = 0; printf("%s", $3); fflush(stdout); }
    | TYPEOF '(' expression ')' {
        std::string s = type_of($3);
        $$ = strdup(s.c_str());
      }
    | fct_call {$$ = nullptr; }
    ;

LIT_CALL: LIT_INTG { std::string s = std::to_string($1); $$ = strdup(s.c_str()); }
        | LIT_FLOT { std::string s = std::to_string($1); $$ = strdup(s.c_str()); }
        | LIT_CHAR { $$ = strdup($1); free($1); }
        | LIT_STRG { $$ = strdup($1); free($1); }
        | LIT_BOOL { $$ = false == $1 ? strdup("false") : strdup("true"); }
        ;

fct_call: SMT_NAME '(' expression arr_argm
        | SMT_NAME '('')'
        ;
arr_argm: ',' expression arr_argm
        | ')'
        ;

control : SEQ_IFIF '(' expression ')' '{' statement_list '}'
        | SEQ_IFIF '(' expression ')' '{' statement_list '}' SEQ_ELSE '{' statement_list '}'
        | SEQ_WHLE '(' expression ')' '{' statement_list '}'
        | SEQ_FOOR '(' expression ';' expression ';' expression ')' '{' statement_list '}'

assignment: SMT_NAME OPR_ASSIGN assig_term
          ;
assig_term: expression
          | assignment
          ;
%%

/*!------------------------------------------------
/*!------------------------------------------------
/*! C++ functions */

void yyerror(const char * s){
  count_error++;
  printf("error - line %d: %s.\n", yylineno, s);
  if(0 == strcmp(s, "syntax error"))
    printf("the program has %zu errors.\n", count_error);
}

int main(int argc, char** argv)
{
  if(argc != 2)
  {
    yyerror("wrong number of arguments");
    return EXIT_FAILURE;
  }

  FILE* ptr = fopen(argv[1], "r");
  if(nullptr == ptr)
  {
    yyerror("invalid file");
    return EXIT_FAILURE;
  }

  yyin = ptr;
  yyparse();
  return EXIT_SUCCESS;
}
